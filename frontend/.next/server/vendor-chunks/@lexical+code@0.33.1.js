"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@lexical+code@0.33.1";
exports.ids = ["vendor-chunks/@lexical+code@0.33.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@lexical+code@0.33.1/node_modules/@lexical/code/LexicalCode.dev.mjs":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@lexical+code@0.33.1/node_modules/@lexical/code/LexicalCode.dev.mjs ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $createCodeHighlightNode: () => (/* binding */ $createCodeHighlightNode),\n/* harmony export */   $createCodeNode: () => (/* binding */ $createCodeNode),\n/* harmony export */   $getEndOfCodeInLine: () => (/* binding */ $getEndOfCodeInLine),\n/* harmony export */   $getFirstCodeNodeOfLine: () => (/* binding */ $getFirstCodeNodeOfLine),\n/* harmony export */   $getLastCodeNodeOfLine: () => (/* binding */ $getLastCodeNodeOfLine),\n/* harmony export */   $getStartOfCodeInLine: () => (/* binding */ $getStartOfCodeInLine),\n/* harmony export */   $isCodeHighlightNode: () => (/* binding */ $isCodeHighlightNode),\n/* harmony export */   $isCodeNode: () => (/* binding */ $isCodeNode),\n/* harmony export */   CODE_LANGUAGE_FRIENDLY_NAME_MAP: () => (/* binding */ CODE_LANGUAGE_FRIENDLY_NAME_MAP),\n/* harmony export */   CODE_LANGUAGE_MAP: () => (/* binding */ CODE_LANGUAGE_MAP),\n/* harmony export */   CodeHighlightNode: () => (/* binding */ CodeHighlightNode),\n/* harmony export */   CodeNode: () => (/* binding */ CodeNode),\n/* harmony export */   DEFAULT_CODE_LANGUAGE: () => (/* binding */ DEFAULT_CODE_LANGUAGE),\n/* harmony export */   PrismTokenizer: () => (/* binding */ PrismTokenizer),\n/* harmony export */   getCodeLanguages: () => (/* binding */ getCodeLanguages),\n/* harmony export */   getDefaultCodeLanguage: () => (/* binding */ getDefaultCodeLanguage),\n/* harmony export */   getEndOfCodeInLine: () => (/* binding */ getEndOfCodeInLine),\n/* harmony export */   getFirstCodeNodeOfLine: () => (/* binding */ getFirstCodeNodeOfLine),\n/* harmony export */   getLanguageFriendlyName: () => (/* binding */ getLanguageFriendlyName),\n/* harmony export */   getLastCodeNodeOfLine: () => (/* binding */ getLastCodeNodeOfLine),\n/* harmony export */   getStartOfCodeInLine: () => (/* binding */ getStartOfCodeInLine),\n/* harmony export */   normalizeCodeLang: () => (/* binding */ normalizeCodeLang),\n/* harmony export */   registerCodeHighlighting: () => (/* binding */ registerCodeHighlighting)\n/* harmony export */ });\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! lexical */ \"(ssr)/./node_modules/.pnpm/lexical@0.33.1/node_modules/lexical/Lexical.dev.mjs\");\n/* harmony import */ var _lexical_utils__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @lexical/utils */ \"(ssr)/./node_modules/.pnpm/@lexical+utils@0.33.1/node_modules/@lexical/utils/LexicalUtils.dev.mjs\");\n/* harmony import */ var prismjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prismjs */ \"(ssr)/./node_modules/.pnpm/prismjs@1.30.0/node_modules/prismjs/prism.js\");\n/* harmony import */ var prismjs_components_prism_clike_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prismjs/components/prism-clike.js */ \"(ssr)/./node_modules/.pnpm/prismjs@1.30.0/node_modules/prismjs/components/prism-clike.js\");\n/* harmony import */ var prismjs_components_prism_javascript_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prismjs/components/prism-javascript.js */ \"(ssr)/./node_modules/.pnpm/prismjs@1.30.0/node_modules/prismjs/components/prism-javascript.js\");\n/* harmony import */ var prismjs_components_prism_markup_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prismjs/components/prism-markup.js */ \"(ssr)/./node_modules/.pnpm/prismjs@1.30.0/node_modules/prismjs/components/prism-markup.js\");\n/* harmony import */ var prismjs_components_prism_markdown_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! prismjs/components/prism-markdown.js */ \"(ssr)/./node_modules/.pnpm/prismjs@1.30.0/node_modules/prismjs/components/prism-markdown.js\");\n/* harmony import */ var prismjs_components_prism_c_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! prismjs/components/prism-c.js */ \"(ssr)/./node_modules/.pnpm/prismjs@1.30.0/node_modules/prismjs/components/prism-c.js\");\n/* harmony import */ var prismjs_components_prism_css_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! prismjs/components/prism-css.js */ \"(ssr)/./node_modules/.pnpm/prismjs@1.30.0/node_modules/prismjs/components/prism-css.js\");\n/* harmony import */ var prismjs_components_prism_objectivec_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! prismjs/components/prism-objectivec.js */ \"(ssr)/./node_modules/.pnpm/prismjs@1.30.0/node_modules/prismjs/components/prism-objectivec.js\");\n/* harmony import */ var prismjs_components_prism_sql_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! prismjs/components/prism-sql.js */ \"(ssr)/./node_modules/.pnpm/prismjs@1.30.0/node_modules/prismjs/components/prism-sql.js\");\n/* harmony import */ var prismjs_components_prism_powershell_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! prismjs/components/prism-powershell.js */ \"(ssr)/./node_modules/.pnpm/prismjs@1.30.0/node_modules/prismjs/components/prism-powershell.js\");\n/* harmony import */ var prismjs_components_prism_python_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! prismjs/components/prism-python.js */ \"(ssr)/./node_modules/.pnpm/prismjs@1.30.0/node_modules/prismjs/components/prism-python.js\");\n/* harmony import */ var prismjs_components_prism_rust_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! prismjs/components/prism-rust.js */ \"(ssr)/./node_modules/.pnpm/prismjs@1.30.0/node_modules/prismjs/components/prism-rust.js\");\n/* harmony import */ var prismjs_components_prism_swift_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! prismjs/components/prism-swift.js */ \"(ssr)/./node_modules/.pnpm/prismjs@1.30.0/node_modules/prismjs/components/prism-swift.js\");\n/* harmony import */ var prismjs_components_prism_typescript_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! prismjs/components/prism-typescript.js */ \"(ssr)/./node_modules/.pnpm/prismjs@1.30.0/node_modules/prismjs/components/prism-typescript.js\");\n/* harmony import */ var prismjs_components_prism_java_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! prismjs/components/prism-java.js */ \"(ssr)/./node_modules/.pnpm/prismjs@1.30.0/node_modules/prismjs/components/prism-java.js\");\n/* harmony import */ var prismjs_components_prism_cpp_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! prismjs/components/prism-cpp.js */ \"(ssr)/./node_modules/.pnpm/prismjs@1.30.0/node_modules/prismjs/components/prism-cpp.js\");\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// Do not require this module directly! Use normal `invariant` calls.\n\nfunction formatDevErrorMessage(message) {\n  throw new Error(message);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// invariant(condition, message) will refine types based on \"condition\", and\n// if \"condition\" is false will throw an error. This function is special-cased\n// in flow itself, so we can't name it anything else.\nfunction invariant(cond, message, ...args) {\n  if (cond) {\n    return;\n  }\n  throw new Error('Internal Lexical error: invariant() is meant to be replaced at compile ' + 'time. There is no runtime version. Error: ' + message);\n}\n\n(function (Prism) {\n\n\tPrism.languages.diff = {\n\t\t'coord': [\n\t\t\t// Match all kinds of coord lines (prefixed by \"+++\", \"---\" or \"***\").\n\t\t\t/^(?:\\*{3}|-{3}|\\+{3}).*$/m,\n\t\t\t// Match \"@@ ... @@\" coord lines in unified diff.\n\t\t\t/^@@.*@@$/m,\n\t\t\t// Match coord lines in normal diff (starts with a number).\n\t\t\t/^\\d.*$/m\n\t\t]\n\n\t\t// deleted, inserted, unchanged, diff\n\t};\n\n\t/**\n\t * A map from the name of a block to its line prefix.\n\t *\n\t * @type {Object<string, string>}\n\t */\n\tvar PREFIXES = {\n\t\t'deleted-sign': '-',\n\t\t'deleted-arrow': '<',\n\t\t'inserted-sign': '+',\n\t\t'inserted-arrow': '>',\n\t\t'unchanged': ' ',\n\t\t'diff': '!',\n\t};\n\n\t// add a token for each prefix\n\tObject.keys(PREFIXES).forEach(function (name) {\n\t\tvar prefix = PREFIXES[name];\n\n\t\tvar alias = [];\n\t\tif (!/^\\w+$/.test(name)) { // \"deleted-sign\" -> \"deleted\"\n\t\t\talias.push(/\\w+/.exec(name)[0]);\n\t\t}\n\t\tif (name === 'diff') {\n\t\t\talias.push('bold');\n\t\t}\n\n\t\tPrism.languages.diff[name] = {\n\t\t\tpattern: RegExp('^(?:[' + prefix + '].*(?:\\r\\n?|\\n|(?![\\\\s\\\\S])))+', 'm'),\n\t\t\talias: alias,\n\t\t\tinside: {\n\t\t\t\t'line': {\n\t\t\t\t\tpattern: /(.)(?=[\\s\\S]).*(?:\\r\\n?|\\n)?/,\n\t\t\t\t\tlookbehind: true\n\t\t\t\t},\n\t\t\t\t'prefix': {\n\t\t\t\t\tpattern: /[\\s\\S]/,\n\t\t\t\t\talias: /\\w+/.exec(name)[0]\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t});\n\n\t// make prefixes available to Diff plugin\n\tObject.defineProperty(Prism.languages.diff, 'PREFIXES', {\n\t\tvalue: PREFIXES\n\t});\n\n}(Prism));\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst Prism$1 = globalThis.Prism || window.Prism;\n\n// The following code is extracted/adapted from prismjs v2\n// It will probably be possible to use it directly from prism v2\n// in the future when prismjs v2 is published and Lexical upgrades\n// the prismsjs dependency\n\nfunction getTextContent(token) {\n  if (typeof token === 'string') {\n    return token;\n  } else if (Array.isArray(token)) {\n    return token.map(getTextContent).join('');\n  } else {\n    return getTextContent(token.content);\n  }\n}\nfunction tokenizeDiffHighlight(tokens, language) {\n  const diffLanguage = language;\n  const diffGrammar = Prism$1.languages[diffLanguage];\n  const env = {\n    tokens\n  };\n  const PREFIXES = Prism$1.languages.diff.PREFIXES;\n  for (const token of env.tokens) {\n    if (typeof token === 'string' || !(token.type in PREFIXES) || !Array.isArray(token.content)) {\n      continue;\n    }\n    const type = token.type;\n    let insertedPrefixes = 0;\n    const getPrefixToken = () => {\n      insertedPrefixes++;\n      return new Prism$1.Token('prefix', PREFIXES[type], type.replace(/^(\\w+).*/, '$1'));\n    };\n    const withoutPrefixes = token.content.filter(t => typeof t === 'string' || t.type !== 'prefix');\n    const prefixCount = token.content.length - withoutPrefixes.length;\n    const diffTokens = Prism$1.tokenize(getTextContent(withoutPrefixes), diffGrammar);\n\n    // re-insert prefixes\n    // always add a prefix at the start\n    diffTokens.unshift(getPrefixToken());\n    const LINE_BREAK = /\\r\\n|\\n/g;\n    const insertAfterLineBreakString = text => {\n      const result = [];\n      LINE_BREAK.lastIndex = 0;\n      let last = 0;\n      let m;\n      while (insertedPrefixes < prefixCount && (m = LINE_BREAK.exec(text))) {\n        const end = m.index + m[0].length;\n        result.push(text.slice(last, end));\n        last = end;\n        result.push(getPrefixToken());\n      }\n      if (result.length === 0) {\n        return undefined;\n      }\n      if (last < text.length) {\n        result.push(text.slice(last));\n      }\n      return result;\n    };\n    const insertAfterLineBreak = toks => {\n      for (let i = 0; i < toks.length && insertedPrefixes < prefixCount; i++) {\n        const tok = toks[i];\n        if (typeof tok === 'string') {\n          const inserted = insertAfterLineBreakString(tok);\n          if (inserted) {\n            toks.splice(i, 1, ...inserted);\n            i += inserted.length - 1;\n          }\n        } else if (typeof tok.content === 'string') {\n          const inserted = insertAfterLineBreakString(tok.content);\n          if (inserted) {\n            tok.content = inserted;\n          }\n        } else if (Array.isArray(tok.content)) {\n          insertAfterLineBreak(tok.content);\n        } else {\n          insertAfterLineBreak([tok.content]);\n        }\n      }\n    };\n    insertAfterLineBreak(diffTokens);\n    if (insertedPrefixes < prefixCount) {\n      // we are missing the last prefix\n      diffTokens.push(getPrefixToken());\n    }\n    token.content = diffTokens;\n  }\n  return env.tokens;\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst isLanguageSupportedByPrism = language => {\n  const DIFF_LANGUAGE_REGEX = /^diff-([\\w-]+)/i;\n  try {\n    if (!language) {\n      return false;\n    }\n    const langMatch = DIFF_LANGUAGE_REGEX.exec(language);\n    if (langMatch) {\n      return (\n        // eslint-disable-next-line no-prototype-builtins\n        Prism$1.languages.hasOwnProperty('diff') &&\n        // eslint-disable-next-line no-prototype-builtins\n        Prism$1.languages.hasOwnProperty(langMatch[1])\n      );\n    } else {\n      // eslint-disable-next-line no-prototype-builtins\n      return Prism$1.languages.hasOwnProperty(language);\n    }\n  } catch (_unused) {\n    return false;\n  }\n};\nfunction hasChildDOMNodeTag(node, tagName) {\n  for (const child of node.childNodes) {\n    if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.isHTMLElement)(child) && child.tagName === tagName) {\n      return true;\n    }\n    hasChildDOMNodeTag(child, tagName);\n  }\n  return false;\n}\nconst LANGUAGE_DATA_ATTRIBUTE = 'data-language';\nconst HIGHLIGHT_LANGUAGE_DATA_ATTRIBUTE = 'data-highlight-language';\n\n/** @noInheritDoc */\nclass CodeNode extends _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.ElementNode {\n  /** @internal */\n\n  /** @internal */\n\n  static getType() {\n    return 'code';\n  }\n  static clone(node) {\n    return new CodeNode(node.__language, node.__key);\n  }\n  constructor(language, key) {\n    super(key);\n    this.__language = language || undefined;\n    this.__isSyntaxHighlightSupported = isLanguageSupportedByPrism(language);\n  }\n\n  // View\n  createDOM(config) {\n    const element = document.createElement('code');\n    (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_17__.addClassNamesToElement)(element, config.theme.code);\n    element.setAttribute('spellcheck', 'false');\n    const language = this.getLanguage();\n    if (language) {\n      element.setAttribute(LANGUAGE_DATA_ATTRIBUTE, language);\n      if (this.getIsSyntaxHighlightSupported()) {\n        element.setAttribute(HIGHLIGHT_LANGUAGE_DATA_ATTRIBUTE, language);\n      }\n    }\n    return element;\n  }\n  updateDOM(prevNode, dom, config) {\n    const language = this.__language;\n    const prevLanguage = prevNode.__language;\n    if (language) {\n      if (language !== prevLanguage) {\n        dom.setAttribute(LANGUAGE_DATA_ATTRIBUTE, language);\n        if (this.__isSyntaxHighlightSupported) {\n          dom.setAttribute(HIGHLIGHT_LANGUAGE_DATA_ATTRIBUTE, language);\n        }\n      }\n    } else if (prevLanguage) {\n      dom.removeAttribute(LANGUAGE_DATA_ATTRIBUTE);\n      if (prevNode.__isSyntaxHighlightSupported) {\n        dom.removeAttribute(HIGHLIGHT_LANGUAGE_DATA_ATTRIBUTE);\n      }\n    }\n    return false;\n  }\n  exportDOM(editor) {\n    const element = document.createElement('pre');\n    (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_17__.addClassNamesToElement)(element, editor._config.theme.code);\n    element.setAttribute('spellcheck', 'false');\n    const language = this.getLanguage();\n    if (language) {\n      element.setAttribute(LANGUAGE_DATA_ATTRIBUTE, language);\n      if (this.getIsSyntaxHighlightSupported()) {\n        element.setAttribute(HIGHLIGHT_LANGUAGE_DATA_ATTRIBUTE, language);\n      }\n    }\n    return {\n      element\n    };\n  }\n  static importDOM() {\n    return {\n      // Typically <pre> is used for code blocks, and <code> for inline code styles\n      // but if it's a multi line <code> we'll create a block. Pass through to\n      // inline format handled by TextNode otherwise.\n      code: node => {\n        const isMultiLine = node.textContent != null && (/\\r?\\n/.test(node.textContent) || hasChildDOMNodeTag(node, 'BR'));\n        return isMultiLine ? {\n          conversion: $convertPreElement,\n          priority: 1\n        } : null;\n      },\n      div: () => ({\n        conversion: $convertDivElement,\n        priority: 1\n      }),\n      pre: () => ({\n        conversion: $convertPreElement,\n        priority: 0\n      }),\n      table: node => {\n        const table = node;\n        // domNode is a <table> since we matched it by nodeName\n        if (isGitHubCodeTable(table)) {\n          return {\n            conversion: $convertTableElement,\n            priority: 3\n          };\n        }\n        return null;\n      },\n      td: node => {\n        // element is a <td> since we matched it by nodeName\n        const td = node;\n        const table = td.closest('table');\n        if (isGitHubCodeCell(td) || table && isGitHubCodeTable(table)) {\n          // Return a no-op if it's a table cell in a code table, but not a code line.\n          // Otherwise it'll fall back to the T\n          return {\n            conversion: convertCodeNoop,\n            priority: 3\n          };\n        }\n        return null;\n      },\n      tr: node => {\n        // element is a <tr> since we matched it by nodeName\n        const tr = node;\n        const table = tr.closest('table');\n        if (table && isGitHubCodeTable(table)) {\n          return {\n            conversion: convertCodeNoop,\n            priority: 3\n          };\n        }\n        return null;\n      }\n    };\n  }\n  static importJSON(serializedNode) {\n    return $createCodeNode().updateFromJSON(serializedNode);\n  }\n  updateFromJSON(serializedNode) {\n    return super.updateFromJSON(serializedNode).setLanguage(serializedNode.language);\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      language: this.getLanguage()\n    };\n  }\n\n  // Mutation\n  insertNewAfter(selection, restoreSelection = true) {\n    const children = this.getChildren();\n    const childrenLength = children.length;\n    if (childrenLength >= 2 && children[childrenLength - 1].getTextContent() === '\\n' && children[childrenLength - 2].getTextContent() === '\\n' && selection.isCollapsed() && selection.anchor.key === this.__key && selection.anchor.offset === childrenLength) {\n      children[childrenLength - 1].remove();\n      children[childrenLength - 2].remove();\n      const newElement = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createParagraphNode)();\n      this.insertAfter(newElement, restoreSelection);\n      return newElement;\n    }\n\n    // If the selection is within the codeblock, find all leading tabs and\n    // spaces of the current line. Create a new line that has all those\n    // tabs and spaces, such that leading indentation is preserved.\n    const {\n      anchor,\n      focus\n    } = selection;\n    const firstPoint = anchor.isBefore(focus) ? anchor : focus;\n    const firstSelectionNode = firstPoint.getNode();\n    if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTextNode)(firstSelectionNode)) {\n      let node = $getFirstCodeNodeOfLine(firstSelectionNode);\n      const insertNodes = [];\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(node)) {\n          insertNodes.push((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createTabNode)());\n          node = node.getNextSibling();\n        } else if ($isCodeHighlightNode(node)) {\n          let spaces = 0;\n          const text = node.getTextContent();\n          const textSize = node.getTextContentSize();\n          while (spaces < textSize && text[spaces] === ' ') {\n            spaces++;\n          }\n          if (spaces !== 0) {\n            insertNodes.push($createCodeHighlightNode(' '.repeat(spaces)));\n          }\n          if (spaces !== textSize) {\n            break;\n          }\n          node = node.getNextSibling();\n        } else {\n          break;\n        }\n      }\n      const split = firstSelectionNode.splitText(anchor.offset)[0];\n      const x = anchor.offset === 0 ? 0 : 1;\n      const index = split.getIndexWithinParent() + x;\n      const codeNode = firstSelectionNode.getParentOrThrow();\n      const nodesToInsert = [(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createLineBreakNode)(), ...insertNodes];\n      codeNode.splice(index, 0, nodesToInsert);\n      const last = insertNodes[insertNodes.length - 1];\n      if (last) {\n        last.select();\n      } else if (anchor.offset === 0) {\n        split.selectPrevious();\n      } else {\n        split.getNextSibling().selectNext(0, 0);\n      }\n    }\n    if ($isCodeNode(firstSelectionNode)) {\n      const {\n        offset\n      } = selection.anchor;\n      firstSelectionNode.splice(offset, 0, [(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createLineBreakNode)()]);\n      firstSelectionNode.select(offset + 1, offset + 1);\n    }\n    return null;\n  }\n  canIndent() {\n    return false;\n  }\n  collapseAtStart() {\n    const paragraph = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createParagraphNode)();\n    const children = this.getChildren();\n    children.forEach(child => paragraph.append(child));\n    this.replace(paragraph);\n    return true;\n  }\n  setLanguage(language) {\n    const writable = this.getWritable();\n    writable.__language = language || undefined;\n    writable.__isSyntaxHighlightSupported = isLanguageSupportedByPrism(language);\n    return writable;\n  }\n  getLanguage() {\n    return this.getLatest().__language;\n  }\n  getIsSyntaxHighlightSupported() {\n    return this.getLatest().__isSyntaxHighlightSupported;\n  }\n}\nfunction $createCodeNode(language) {\n  return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$applyNodeReplacement)(new CodeNode(language));\n}\nfunction $isCodeNode(node) {\n  return node instanceof CodeNode;\n}\nfunction $convertPreElement(domNode) {\n  const language = domNode.getAttribute(LANGUAGE_DATA_ATTRIBUTE);\n  return {\n    node: $createCodeNode(language)\n  };\n}\nfunction $convertDivElement(domNode) {\n  // domNode is a <div> since we matched it by nodeName\n  const div = domNode;\n  const isCode = isCodeElement(div);\n  if (!isCode && !isCodeChildElement(div)) {\n    return {\n      node: null\n    };\n  }\n  return {\n    node: isCode ? $createCodeNode() : null\n  };\n}\nfunction $convertTableElement() {\n  return {\n    node: $createCodeNode()\n  };\n}\nfunction convertCodeNoop() {\n  return {\n    node: null\n  };\n}\nfunction isCodeElement(div) {\n  return div.style.fontFamily.match('monospace') !== null;\n}\nfunction isCodeChildElement(node) {\n  let parent = node.parentElement;\n  while (parent !== null) {\n    if (isCodeElement(parent)) {\n      return true;\n    }\n    parent = parent.parentElement;\n  }\n  return false;\n}\nfunction isGitHubCodeCell(cell) {\n  return cell.classList.contains('js-file-line');\n}\nfunction isGitHubCodeTable(table) {\n  return table.classList.contains('js-file-line-container');\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nconst DEFAULT_CODE_LANGUAGE = 'javascript';\nconst CODE_LANGUAGE_FRIENDLY_NAME_MAP = {\n  c: 'C',\n  clike: 'C-like',\n  cpp: 'C++',\n  css: 'CSS',\n  html: 'HTML',\n  java: 'Java',\n  js: 'JavaScript',\n  markdown: 'Markdown',\n  objc: 'Objective-C',\n  plain: 'Plain Text',\n  powershell: 'PowerShell',\n  py: 'Python',\n  rust: 'Rust',\n  sql: 'SQL',\n  swift: 'Swift',\n  typescript: 'TypeScript',\n  xml: 'XML'\n};\nconst CODE_LANGUAGE_MAP = {\n  cpp: 'cpp',\n  java: 'java',\n  javascript: 'js',\n  md: 'markdown',\n  plaintext: 'plain',\n  python: 'py',\n  text: 'plain',\n  ts: 'typescript'\n};\nfunction normalizeCodeLang(lang) {\n  return CODE_LANGUAGE_MAP[lang] || lang;\n}\nfunction getLanguageFriendlyName(lang) {\n  const _lang = normalizeCodeLang(lang);\n  return CODE_LANGUAGE_FRIENDLY_NAME_MAP[_lang] || _lang;\n}\nconst getDefaultCodeLanguage = () => DEFAULT_CODE_LANGUAGE;\nconst getCodeLanguages = () => Object.keys(Prism$1.languages).filter(\n// Prism has several language helpers mixed into languages object\n// so filtering them out here to get langs list\nlanguage => typeof Prism$1.languages[language] !== 'function').sort();\n\n/** @noInheritDoc */\nclass CodeHighlightNode extends _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.TextNode {\n  /** @internal */\n\n  constructor(text = '', highlightType, key) {\n    super(text, key);\n    this.__highlightType = highlightType;\n  }\n  static getType() {\n    return 'code-highlight';\n  }\n  static clone(node) {\n    return new CodeHighlightNode(node.__text, node.__highlightType || undefined, node.__key);\n  }\n  getHighlightType() {\n    const self = this.getLatest();\n    return self.__highlightType;\n  }\n  setHighlightType(highlightType) {\n    const self = this.getWritable();\n    self.__highlightType = highlightType || undefined;\n    return self;\n  }\n  canHaveFormat() {\n    return false;\n  }\n  createDOM(config) {\n    const element = super.createDOM(config);\n    const className = getHighlightThemeClass(config.theme, this.__highlightType);\n    (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_17__.addClassNamesToElement)(element, className);\n    return element;\n  }\n  updateDOM(prevNode, dom, config) {\n    const update = super.updateDOM(prevNode, dom, config);\n    const prevClassName = getHighlightThemeClass(config.theme, prevNode.__highlightType);\n    const nextClassName = getHighlightThemeClass(config.theme, this.__highlightType);\n    if (prevClassName !== nextClassName) {\n      if (prevClassName) {\n        (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_17__.removeClassNamesFromElement)(dom, prevClassName);\n      }\n      if (nextClassName) {\n        (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_17__.addClassNamesToElement)(dom, nextClassName);\n      }\n    }\n    return update;\n  }\n  static importJSON(serializedNode) {\n    return $createCodeHighlightNode().updateFromJSON(serializedNode);\n  }\n  updateFromJSON(serializedNode) {\n    return super.updateFromJSON(serializedNode).setHighlightType(serializedNode.highlightType);\n  }\n  exportJSON() {\n    return {\n      ...super.exportJSON(),\n      highlightType: this.getHighlightType()\n    };\n  }\n\n  // Prevent formatting (bold, underline, etc)\n  setFormat(format) {\n    return this;\n  }\n  isParentRequired() {\n    return true;\n  }\n  createParentElementNode() {\n    return $createCodeNode();\n  }\n}\nfunction getHighlightThemeClass(theme, highlightType) {\n  return highlightType && theme && theme.codeHighlight && theme.codeHighlight[highlightType];\n}\nfunction $createCodeHighlightNode(text = '', highlightType) {\n  return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$applyNodeReplacement)(new CodeHighlightNode(text, highlightType));\n}\nfunction $isCodeHighlightNode(node) {\n  return node instanceof CodeHighlightNode;\n}\nfunction $getLastMatchingCodeNode(anchor, direction) {\n  let matchingNode = anchor;\n  for (let caret = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getSiblingCaret)(anchor, direction); caret && ($isCodeHighlightNode(caret.origin) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(caret.origin)); caret = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_17__.$getAdjacentCaret)(caret)) {\n    matchingNode = caret.origin;\n  }\n  return matchingNode;\n}\nfunction $getFirstCodeNodeOfLine(anchor) {\n  return $getLastMatchingCodeNode(anchor, 'previous');\n}\nfunction $getLastCodeNodeOfLine(anchor) {\n  return $getLastMatchingCodeNode(anchor, 'next');\n}\n\nconst PrismTokenizer = {\n  defaultLanguage: DEFAULT_CODE_LANGUAGE,\n  tokenize(code, language) {\n    return Prism$1.tokenize(code, Prism$1.languages[language || ''] || Prism$1.languages[this.defaultLanguage]);\n  }\n};\nfunction $getStartOfCodeInLine(anchor, offset) {\n  let last = null;\n  let lastNonBlank = null;\n  let node = anchor;\n  let nodeOffset = offset;\n  let nodeTextContent = anchor.getTextContent();\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (nodeOffset === 0) {\n      node = node.getPreviousSibling();\n      if (node === null) {\n        break;\n      }\n      if (!($isCodeHighlightNode(node) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(node) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(node))) {\n        formatDevErrorMessage(`Expected a valid Code Node: CodeHighlightNode, TabNode, LineBreakNode`);\n      }\n      if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(node)) {\n        last = {\n          node,\n          offset: 1\n        };\n        break;\n      }\n      nodeOffset = Math.max(0, node.getTextContentSize() - 1);\n      nodeTextContent = node.getTextContent();\n    } else {\n      nodeOffset--;\n    }\n    const character = nodeTextContent[nodeOffset];\n    if ($isCodeHighlightNode(node) && character !== ' ') {\n      lastNonBlank = {\n        node,\n        offset: nodeOffset\n      };\n    }\n  }\n  // lastNonBlank !== null: anchor in the middle of code; move to line beginning\n  if (lastNonBlank !== null) {\n    return lastNonBlank;\n  }\n  // Spaces, tabs or nothing ahead of anchor\n  let codeCharacterAtAnchorOffset = null;\n  if (offset < anchor.getTextContentSize()) {\n    if ($isCodeHighlightNode(anchor)) {\n      codeCharacterAtAnchorOffset = anchor.getTextContent()[offset];\n    }\n  } else {\n    const nextSibling = anchor.getNextSibling();\n    if ($isCodeHighlightNode(nextSibling)) {\n      codeCharacterAtAnchorOffset = nextSibling.getTextContent()[0];\n    }\n  }\n  if (codeCharacterAtAnchorOffset !== null && codeCharacterAtAnchorOffset !== ' ') {\n    // Borderline whitespace and code, move to line beginning\n    return last;\n  } else {\n    const nextNonBlank = findNextNonBlankInLine(anchor, offset);\n    if (nextNonBlank !== null) {\n      return nextNonBlank;\n    } else {\n      return last;\n    }\n  }\n}\nfunction findNextNonBlankInLine(anchor, offset) {\n  let node = anchor;\n  let nodeOffset = offset;\n  let nodeTextContent = anchor.getTextContent();\n  let nodeTextContentSize = anchor.getTextContentSize();\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (!$isCodeHighlightNode(node) || nodeOffset === nodeTextContentSize) {\n      node = node.getNextSibling();\n      if (node === null || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(node)) {\n        return null;\n      }\n      if ($isCodeHighlightNode(node)) {\n        nodeOffset = 0;\n        nodeTextContent = node.getTextContent();\n        nodeTextContentSize = node.getTextContentSize();\n      }\n    }\n    if ($isCodeHighlightNode(node)) {\n      if (nodeTextContent[nodeOffset] !== ' ') {\n        return {\n          node,\n          offset: nodeOffset\n        };\n      }\n      nodeOffset++;\n    }\n  }\n}\nfunction $getEndOfCodeInLine(anchor) {\n  const lastNode = $getLastCodeNodeOfLine(anchor);\n  if (!!(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(lastNode)) {\n    formatDevErrorMessage(`Unexpected lineBreakNode in getEndOfCodeInLine`);\n  }\n  return lastNode;\n}\nfunction $textNodeTransform(node, editor, tokenizer) {\n  // Since CodeNode has flat children structure we only need to check\n  // if node's parent is a code node and run highlighting if so\n  const parentNode = node.getParent();\n  if ($isCodeNode(parentNode)) {\n    codeNodeTransform(parentNode, editor, tokenizer);\n  } else if ($isCodeHighlightNode(node)) {\n    // When code block converted into paragraph or other element\n    // code highlight nodes converted back to normal text\n    node.replace((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createTextNode)(node.__text));\n  }\n}\nfunction updateCodeGutter(node, editor) {\n  const codeElement = editor.getElementByKey(node.getKey());\n  if (codeElement === null) {\n    return;\n  }\n  const children = node.getChildren();\n  const childrenLength = children.length;\n  // @ts-ignore: internal field\n  if (childrenLength === codeElement.__cachedChildrenLength) {\n    // Avoid updating the attribute if the children length hasn't changed.\n    return;\n  }\n  // @ts-ignore:: internal field\n  codeElement.__cachedChildrenLength = childrenLength;\n  let gutter = '1';\n  let count = 1;\n  for (let i = 0; i < childrenLength; i++) {\n    if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(children[i])) {\n      gutter += '\\n' + ++count;\n    }\n  }\n  codeElement.setAttribute('data-gutter', gutter);\n}\n\n// Using `skipTransforms` to prevent extra transforms since reformatting the code\n// will not affect code block content itself.\n//\n// Using extra cache (`nodesCurrentlyHighlighting`) since both CodeNode and CodeHighlightNode\n// transforms might be called at the same time (e.g. new CodeHighlight node inserted) and\n// in both cases we'll rerun whole reformatting over CodeNode, which is redundant.\n// Especially when pasting code into CodeBlock.\n\nconst nodesCurrentlyHighlighting = new Set();\nfunction codeNodeTransform(node, editor, tokenizer) {\n  const nodeKey = node.getKey();\n  if (nodesCurrentlyHighlighting.has(nodeKey)) {\n    return;\n  }\n  nodesCurrentlyHighlighting.add(nodeKey);\n\n  // When new code block inserted it might not have language selected\n  if (node.getLanguage() === undefined) {\n    node.setLanguage(tokenizer.defaultLanguage);\n  }\n\n  // Using nested update call to pass `skipTransforms` since we don't want\n  // each individual CodeHighlightNode to be transformed again as it's already\n  // in its final state\n  editor.update(() => {\n    $updateAndRetainSelection(nodeKey, () => {\n      const currentNode = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getNodeByKey)(nodeKey);\n      if (!$isCodeNode(currentNode) || !currentNode.isAttached()) {\n        return false;\n      }\n      const DIFF_LANGUAGE_REGEX = /^diff-([\\w-]+)/i;\n      const currentLanguage = currentNode.getLanguage() || tokenizer.defaultLanguage;\n      const diffLanguageMatch = DIFF_LANGUAGE_REGEX.exec(currentLanguage);\n      const code = currentNode.getTextContent();\n      let tokens = tokenizer.tokenize(code, diffLanguageMatch ? 'diff' : currentLanguage);\n      if (diffLanguageMatch) {\n        tokens = tokenizeDiffHighlight(tokens, diffLanguageMatch[1]);\n      }\n      const highlightNodes = $getHighlightNodes(tokens);\n      const diffRange = getDiffRange(currentNode.getChildren(), highlightNodes);\n      const {\n        from,\n        to,\n        nodesForReplacement\n      } = diffRange;\n      if (from !== to || nodesForReplacement.length) {\n        node.splice(from, to - from, nodesForReplacement);\n        return true;\n      }\n      return false;\n    });\n  }, {\n    onUpdate: () => {\n      nodesCurrentlyHighlighting.delete(nodeKey);\n    },\n    skipTransforms: true\n  });\n}\nfunction $getHighlightNodes(tokens, type) {\n  const nodes = [];\n  for (const token of tokens) {\n    if (typeof token === 'string') {\n      const partials = token.split(/(\\n|\\t)/);\n      const partialsLength = partials.length;\n      for (let i = 0; i < partialsLength; i++) {\n        const part = partials[i];\n        if (part === '\\n' || part === '\\r\\n') {\n          nodes.push((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createLineBreakNode)());\n        } else if (part === '\\t') {\n          nodes.push((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createTabNode)());\n        } else if (part.length > 0) {\n          nodes.push($createCodeHighlightNode(part, type));\n        }\n      }\n    } else {\n      const {\n        content,\n        alias\n      } = token;\n      if (typeof content === 'string') {\n        nodes.push(...$getHighlightNodes([content], token.type === 'prefix' && typeof alias === 'string' ? alias : token.type));\n      } else if (Array.isArray(content)) {\n        nodes.push(...$getHighlightNodes(content, token.type === 'unchanged' ? undefined : token.type));\n      }\n    }\n  }\n  return nodes;\n}\n\n// Wrapping update function into selection retainer, that tries to keep cursor at the same\n// position as before.\nfunction $updateAndRetainSelection(nodeKey, updateFn) {\n  const node = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getNodeByKey)(nodeKey);\n  if (!$isCodeNode(node) || !node.isAttached()) {\n    return;\n  }\n  const selection = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getSelection)();\n  // If it's not range selection (or null selection) there's no need to change it,\n  // but we can still run highlighting logic\n  if (!(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isRangeSelection)(selection)) {\n    updateFn();\n    return;\n  }\n  const anchor = selection.anchor;\n  const anchorOffset = anchor.offset;\n  const isNewLineAnchor = anchor.type === 'element' && (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(node.getChildAtIndex(anchor.offset - 1));\n  let textOffset = 0;\n\n  // Calculating previous text offset (all text node prior to anchor + anchor own text offset)\n  if (!isNewLineAnchor) {\n    const anchorNode = anchor.getNode();\n    textOffset = anchorOffset + anchorNode.getPreviousSiblings().reduce((offset, _node) => {\n      return offset + _node.getTextContentSize();\n    }, 0);\n  }\n  const hasChanges = updateFn();\n  if (!hasChanges) {\n    return;\n  }\n\n  // Non-text anchors only happen for line breaks, otherwise\n  // selection will be within text node (code highlight node)\n  if (isNewLineAnchor) {\n    anchor.getNode().select(anchorOffset, anchorOffset);\n    return;\n  }\n\n  // If it was non-element anchor then we walk through child nodes\n  // and looking for a position of original text offset\n  node.getChildren().some(_node => {\n    const isText = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTextNode)(_node);\n    if (isText || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(_node)) {\n      const textContentSize = _node.getTextContentSize();\n      if (isText && textContentSize >= textOffset) {\n        _node.select(textOffset, textOffset);\n        return true;\n      }\n      textOffset -= textContentSize;\n    }\n    return false;\n  });\n}\n\n// Finds minimal diff range between two nodes lists. It returns from/to range boundaries of prevNodes\n// that needs to be replaced with `nodes` (subset of nextNodes) to make prevNodes equal to nextNodes.\nfunction getDiffRange(prevNodes, nextNodes) {\n  let leadingMatch = 0;\n  while (leadingMatch < prevNodes.length) {\n    if (!isEqual(prevNodes[leadingMatch], nextNodes[leadingMatch])) {\n      break;\n    }\n    leadingMatch++;\n  }\n  const prevNodesLength = prevNodes.length;\n  const nextNodesLength = nextNodes.length;\n  const maxTrailingMatch = Math.min(prevNodesLength, nextNodesLength) - leadingMatch;\n  let trailingMatch = 0;\n  while (trailingMatch < maxTrailingMatch) {\n    trailingMatch++;\n    if (!isEqual(prevNodes[prevNodesLength - trailingMatch], nextNodes[nextNodesLength - trailingMatch])) {\n      trailingMatch--;\n      break;\n    }\n  }\n  const from = leadingMatch;\n  const to = prevNodesLength - trailingMatch;\n  const nodesForReplacement = nextNodes.slice(leadingMatch, nextNodesLength - trailingMatch);\n  return {\n    from,\n    nodesForReplacement,\n    to\n  };\n}\nfunction isEqual(nodeA, nodeB) {\n  // Only checking for code highlight nodes, tabs and linebreaks. If it's regular text node\n  // returning false so that it's transformed into code highlight node\n  return $isCodeHighlightNode(nodeA) && $isCodeHighlightNode(nodeB) && nodeA.__text === nodeB.__text && nodeA.__highlightType === nodeB.__highlightType || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(nodeA) && (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(nodeB) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(nodeA) && (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(nodeB);\n}\n\n/**\n * Returns a boolean.\n * Check that the selection span is within a single CodeNode.\n * This is used to guard against executing handlers that can only be\n * applied in a single CodeNode context\n */\nfunction $isSelectionInCode(selection) {\n  if (!(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isRangeSelection)(selection)) {\n    return false;\n  }\n  const anchorNode = selection.anchor.getNode();\n  const maybeAnchorCodeNode = $isCodeNode(anchorNode) ? anchorNode : anchorNode.getParent();\n  const focusNode = selection.focus.getNode();\n  const maybeFocusCodeNode = $isCodeNode(focusNode) ? focusNode : focusNode.getParent();\n  return $isCodeNode(maybeAnchorCodeNode) && maybeAnchorCodeNode.is(maybeFocusCodeNode);\n}\n\n/**\n * Returns an Array of code lines\n * Take the sequence of LineBreakNode | TabNode | CodeHighlightNode forming\n * the selection and split it by LineBreakNode.\n * If the selection ends at the start of the last line, it is considered empty.\n * Empty lines are discarded.\n */\nfunction $getCodeLines(selection) {\n  const nodes = selection.getNodes();\n  const lines = [];\n  if (nodes.length === 1 && $isCodeNode(nodes[0])) {\n    return lines;\n  }\n  let lastLine = [];\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (!($isCodeHighlightNode(node) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(node) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(node))) {\n      formatDevErrorMessage(`Expected selection to be inside CodeBlock and consisting of CodeHighlightNode, TabNode and LineBreakNode`);\n    }\n    if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(node)) {\n      if (lastLine.length > 0) {\n        lines.push(lastLine);\n        lastLine = [];\n      }\n    } else {\n      lastLine.push(node);\n    }\n  }\n  if (lastLine.length > 0) {\n    const selectionEnd = selection.isBackward() ? selection.anchor : selection.focus;\n\n    // Discard the last line if the selection ends exactly at the\n    // start of the line (no real selection)\n    const lastPoint = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createPoint)(lastLine[0].getKey(), 0, 'text');\n    if (!selectionEnd.is(lastPoint)) {\n      lines.push(lastLine);\n    }\n  }\n  return lines;\n}\nfunction $handleTab(shiftKey) {\n  const selection = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getSelection)();\n  if (!(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isRangeSelection)(selection) || !$isSelectionInCode(selection)) {\n    return null;\n  }\n  const indentOrOutdent = !shiftKey ? _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.INDENT_CONTENT_COMMAND : _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.OUTDENT_CONTENT_COMMAND;\n  const tabOrOutdent = !shiftKey ? _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.INSERT_TAB_COMMAND : _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.OUTDENT_CONTENT_COMMAND;\n  const anchor = selection.anchor;\n  const focus = selection.focus;\n\n  // 1. early decision when there is no real selection\n  if (anchor.is(focus)) {\n    return tabOrOutdent;\n  }\n\n  // 2. If only empty lines or multiple non-empty lines are selected: indent/outdent\n  const codeLines = $getCodeLines(selection);\n  if (codeLines.length !== 1) {\n    return indentOrOutdent;\n  }\n  const codeLine = codeLines[0];\n  const codeLineLength = codeLine.length;\n  if (!(codeLineLength !== 0)) {\n    formatDevErrorMessage(`$getCodeLines only extracts non-empty lines`);\n  } // Take into account the direction of the selection\n  let selectionFirst;\n  let selectionLast;\n  if (selection.isBackward()) {\n    selectionFirst = focus;\n    selectionLast = anchor;\n  } else {\n    selectionFirst = anchor;\n    selectionLast = focus;\n  }\n\n  // find boundary elements of the line\n  // since codeLine only contains TabNode | CodeHighlightNode\n  // the result of these functions should is of Type TabNode | CodeHighlightNode\n  const firstOfLine = $getFirstCodeNodeOfLine(codeLine[0]);\n  const lastOfLine = $getLastCodeNodeOfLine(codeLine[0]);\n  const anchorOfLine = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createPoint)(firstOfLine.getKey(), 0, 'text');\n  const focusOfLine = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createPoint)(lastOfLine.getKey(), lastOfLine.getTextContentSize(), 'text');\n\n  // 3. multiline because selection started strictly before the line\n  if (selectionFirst.isBefore(anchorOfLine)) {\n    return indentOrOutdent;\n  }\n\n  // 4. multiline because the selection stops strictly after the line\n  if (focusOfLine.isBefore(selectionLast)) {\n    return indentOrOutdent;\n  }\n\n  // The selection if within the line.\n  // 4. If it does not touch both borders, it needs a tab\n  if (anchorOfLine.isBefore(selectionFirst) || selectionLast.isBefore(focusOfLine)) {\n    return tabOrOutdent;\n  }\n\n  // 5. Selection is matching a full line on non-empty code\n  return indentOrOutdent;\n}\nfunction $handleMultilineIndent(type) {\n  const selection = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getSelection)();\n  if (!(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isRangeSelection)(selection) || !$isSelectionInCode(selection)) {\n    return false;\n  }\n  const codeLines = $getCodeLines(selection);\n  const codeLinesLength = codeLines.length;\n\n  // Special Indent case\n  // Selection is collapsed at the beginning of a line\n  if (codeLinesLength === 0 && selection.isCollapsed()) {\n    if (type === _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.INDENT_CONTENT_COMMAND) {\n      selection.insertNodes([(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createTabNode)()]);\n    }\n    return true;\n  }\n\n  // Special Indent case\n  // Selection is matching only one LineBreak\n  if (codeLinesLength === 0 && type === _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.INDENT_CONTENT_COMMAND && selection.getTextContent() === '\\n') {\n    const tabNode = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createTabNode)();\n    const lineBreakNode = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createLineBreakNode)();\n    const direction = selection.isBackward() ? 'previous' : 'next';\n    selection.insertNodes([tabNode, lineBreakNode]);\n    (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$setSelectionFromCaretRange)((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getCaretRangeInDirection)((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getCaretRange)((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getTextPointCaret)(tabNode, 'next', 0), (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$normalizeCaret)((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getSiblingCaret)(lineBreakNode, 'next'))), direction));\n    return true;\n  }\n\n  // Indent Non Empty Lines\n  for (let i = 0; i < codeLinesLength; i++) {\n    const line = codeLines[i];\n    // a line here is never empty\n    if (line.length > 0) {\n      let firstOfLine = line[0];\n\n      // make sure to consider the first node on the first line\n      // because the line might not be fully selected\n      if (i === 0) {\n        firstOfLine = $getFirstCodeNodeOfLine(firstOfLine);\n      }\n      if (type === _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.INDENT_CONTENT_COMMAND) {\n        const tabNode = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createTabNode)();\n        firstOfLine.insertBefore(tabNode);\n        // First real code line may need selection adjustment\n        // when firstOfLine is at the selection boundary\n        if (i === 0) {\n          const anchorKey = selection.isBackward() ? 'focus' : 'anchor';\n          const anchorLine = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createPoint)(firstOfLine.getKey(), 0, 'text');\n          if (selection[anchorKey].is(anchorLine)) {\n            selection[anchorKey].set(tabNode.getKey(), 0, 'text');\n          }\n        }\n      } else if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(firstOfLine)) {\n        firstOfLine.remove();\n      }\n    }\n  }\n  return true;\n}\nfunction $handleShiftLines(type, event) {\n  // We only care about the alt+arrow keys\n  const selection = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getSelection)();\n  if (!(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isRangeSelection)(selection)) {\n    return false;\n  }\n\n  // I'm not quite sure why, but it seems like calling anchor.getNode() collapses the selection here\n  // So first, get the anchor and the focus, then get their nodes\n  const {\n    anchor,\n    focus\n  } = selection;\n  const anchorOffset = anchor.offset;\n  const focusOffset = focus.offset;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  const arrowIsUp = type === _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.KEY_ARROW_UP_COMMAND;\n\n  // Ensure the selection is within the codeblock\n  if (!$isSelectionInCode(selection) || !($isCodeHighlightNode(anchorNode) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(anchorNode)) || !($isCodeHighlightNode(focusNode) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(focusNode))) {\n    return false;\n  }\n  if (!event.altKey) {\n    // Handle moving selection out of the code block, given there are no\n    // siblings that can natively take the selection.\n    if (selection.isCollapsed()) {\n      const codeNode = anchorNode.getParentOrThrow();\n      if (arrowIsUp && anchorOffset === 0 && anchorNode.getPreviousSibling() === null) {\n        const codeNodeSibling = codeNode.getPreviousSibling();\n        if (codeNodeSibling === null) {\n          codeNode.selectPrevious();\n          event.preventDefault();\n          return true;\n        }\n      } else if (!arrowIsUp && anchorOffset === anchorNode.getTextContentSize() && anchorNode.getNextSibling() === null) {\n        const codeNodeSibling = codeNode.getNextSibling();\n        if (codeNodeSibling === null) {\n          codeNode.selectNext();\n          event.preventDefault();\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  let start;\n  let end;\n  if (anchorNode.isBefore(focusNode)) {\n    start = $getFirstCodeNodeOfLine(anchorNode);\n    end = $getLastCodeNodeOfLine(focusNode);\n  } else {\n    start = $getFirstCodeNodeOfLine(focusNode);\n    end = $getLastCodeNodeOfLine(anchorNode);\n  }\n  if (start == null || end == null) {\n    return false;\n  }\n  const range = start.getNodesBetween(end);\n  for (let i = 0; i < range.length; i++) {\n    const node = range[i];\n    if (!$isCodeHighlightNode(node) && !(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(node) && !(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(node)) {\n      return false;\n    }\n  }\n\n  // After this point, we know the selection is within the codeblock. We may not be able to\n  // actually move the lines around, but we want to return true either way to prevent\n  // the event's default behavior\n  event.preventDefault();\n  event.stopPropagation(); // required to stop cursor movement under Firefox\n\n  const linebreak = arrowIsUp ? start.getPreviousSibling() : end.getNextSibling();\n  if (!(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(linebreak)) {\n    return true;\n  }\n  const sibling = arrowIsUp ? linebreak.getPreviousSibling() : linebreak.getNextSibling();\n  if (sibling == null) {\n    return true;\n  }\n  const maybeInsertionPoint = $isCodeHighlightNode(sibling) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(sibling) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(sibling) ? arrowIsUp ? $getFirstCodeNodeOfLine(sibling) : $getLastCodeNodeOfLine(sibling) : null;\n  let insertionPoint = maybeInsertionPoint != null ? maybeInsertionPoint : sibling;\n  linebreak.remove();\n  range.forEach(node => node.remove());\n  if (type === _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.KEY_ARROW_UP_COMMAND) {\n    range.forEach(node => insertionPoint.insertBefore(node));\n    insertionPoint.insertBefore(linebreak);\n  } else {\n    insertionPoint.insertAfter(linebreak);\n    insertionPoint = linebreak;\n    range.forEach(node => {\n      insertionPoint.insertAfter(node);\n      insertionPoint = node;\n    });\n  }\n  selection.setTextNodeRange(anchorNode, anchorOffset, focusNode, focusOffset);\n  return true;\n}\nfunction $handleMoveTo(type, event) {\n  const selection = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getSelection)();\n  if (!(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isRangeSelection)(selection)) {\n    return false;\n  }\n  const {\n    anchor,\n    focus\n  } = selection;\n  const anchorNode = anchor.getNode();\n  const focusNode = focus.getNode();\n  const isMoveToStart = type === _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.MOVE_TO_START;\n\n  // Ensure the selection is within the codeblock\n  if (!$isSelectionInCode(selection) || !($isCodeHighlightNode(anchorNode) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(anchorNode)) || !($isCodeHighlightNode(focusNode) || (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isTabNode)(focusNode))) {\n    return false;\n  }\n  if (isMoveToStart) {\n    const start = $getStartOfCodeInLine(focusNode, focus.offset);\n    if (start !== null) {\n      const {\n        node,\n        offset\n      } = start;\n      if ((0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isLineBreakNode)(node)) {\n        node.selectNext(0, 0);\n      } else {\n        selection.setTextNodeRange(node, offset, node, offset);\n      }\n    } else {\n      focusNode.getParentOrThrow().selectStart();\n    }\n  } else {\n    const node = $getEndOfCodeInLine(focusNode);\n    node.select();\n  }\n  event.preventDefault();\n  event.stopPropagation();\n  return true;\n}\nfunction registerCodeHighlighting(editor, tokenizer) {\n  if (!editor.hasNodes([CodeNode, CodeHighlightNode])) {\n    throw new Error('CodeHighlightPlugin: CodeNode or CodeHighlightNode not registered on editor');\n  }\n  if (tokenizer == null) {\n    tokenizer = PrismTokenizer;\n  }\n  const registrations = [];\n\n  // Only register the mutation listener if not in headless mode\n  if (editor._headless !== true) {\n    registrations.push(editor.registerMutationListener(CodeNode, mutations => {\n      editor.update(() => {\n        for (const [key, type] of mutations) {\n          if (type !== 'destroyed') {\n            const node = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getNodeByKey)(key);\n            if (node !== null) {\n              updateCodeGutter(node, editor);\n            }\n          }\n        }\n      });\n    }, {\n      skipInitialization: false\n    }));\n  }\n\n  // Add the rest of the registrations\n  registrations.push(editor.registerNodeTransform(CodeNode, node => codeNodeTransform(node, editor, tokenizer)), editor.registerNodeTransform(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.TextNode, node => $textNodeTransform(node, editor, tokenizer)), editor.registerNodeTransform(CodeHighlightNode, node => $textNodeTransform(node, editor, tokenizer)), editor.registerCommand(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.KEY_TAB_COMMAND, event => {\n    const command = $handleTab(event.shiftKey);\n    if (command === null) {\n      return false;\n    }\n    event.preventDefault();\n    editor.dispatchCommand(command, undefined);\n    return true;\n  }, _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.COMMAND_PRIORITY_LOW), editor.registerCommand(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.INSERT_TAB_COMMAND, () => {\n    const selection = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getSelection)();\n    if (!$isSelectionInCode(selection)) {\n      return false;\n    }\n    (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$insertNodes)([(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$createTabNode)()]);\n    return true;\n  }, _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.COMMAND_PRIORITY_LOW), editor.registerCommand(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.INDENT_CONTENT_COMMAND, payload => $handleMultilineIndent(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.INDENT_CONTENT_COMMAND), _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.COMMAND_PRIORITY_LOW), editor.registerCommand(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.OUTDENT_CONTENT_COMMAND, payload => $handleMultilineIndent(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.OUTDENT_CONTENT_COMMAND), _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.COMMAND_PRIORITY_LOW), editor.registerCommand(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.KEY_ARROW_UP_COMMAND, event => {\n    const selection = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getSelection)();\n    if (!(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isRangeSelection)(selection)) {\n      return false;\n    }\n    const {\n      anchor\n    } = selection;\n    const anchorNode = anchor.getNode();\n    if (!$isSelectionInCode(selection)) {\n      return false;\n    }\n    // If at the start of a code block, prevent selection from moving out\n    if (selection.isCollapsed() && anchor.offset === 0 && anchorNode.getPreviousSibling() === null && $isCodeNode(anchorNode.getParentOrThrow())) {\n      event.preventDefault();\n      return true;\n    }\n    return $handleShiftLines(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.KEY_ARROW_UP_COMMAND, event);\n  }, _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.COMMAND_PRIORITY_LOW), editor.registerCommand(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.KEY_ARROW_DOWN_COMMAND, event => {\n    const selection = (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$getSelection)();\n    if (!(0,_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.$isRangeSelection)(selection)) {\n      return false;\n    }\n    const {\n      anchor\n    } = selection;\n    const anchorNode = anchor.getNode();\n    if (!$isSelectionInCode(selection)) {\n      return false;\n    }\n    // If at the end of a code block, prevent selection from moving out\n    if (selection.isCollapsed() && anchor.offset === anchorNode.getTextContentSize() && anchorNode.getNextSibling() === null && $isCodeNode(anchorNode.getParentOrThrow())) {\n      event.preventDefault();\n      return true;\n    }\n    return $handleShiftLines(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.KEY_ARROW_DOWN_COMMAND, event);\n  }, _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.COMMAND_PRIORITY_LOW), editor.registerCommand(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.MOVE_TO_START, event => $handleMoveTo(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.MOVE_TO_START, event), _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.COMMAND_PRIORITY_LOW), editor.registerCommand(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.MOVE_TO_END, event => $handleMoveTo(_lexical_utils__WEBPACK_IMPORTED_MODULE_16__.MOVE_TO_END, event), _lexical_utils__WEBPACK_IMPORTED_MODULE_16__.COMMAND_PRIORITY_LOW));\n  return (0,_lexical_utils__WEBPACK_IMPORTED_MODULE_17__.mergeRegister)(...registrations);\n}\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\n/** @deprecated renamed to {@link $getFirstCodeNodeOfLine} by @lexical/eslint-plugin rules-of-lexical */\nconst getFirstCodeNodeOfLine = $getFirstCodeNodeOfLine;\n/** @deprecated renamed to {@link $getLastCodeNodeOfLine} by @lexical/eslint-plugin rules-of-lexical */\nconst getLastCodeNodeOfLine = $getLastCodeNodeOfLine;\n/** @deprecated renamed to {@link $getEndOfCodeInLine} by @lexical/eslint-plugin rules-of-lexical */\nconst getEndOfCodeInLine = $getEndOfCodeInLine;\n/** @deprecated renamed to {@link $getStartOfCodeInLine} by @lexical/eslint-plugin rules-of-lexical */\nconst getStartOfCodeInLine = $getStartOfCodeInLine;\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@lexical+code@0.33.1/node_modules/@lexical/code/LexicalCode.dev.mjs\n");

/***/ })

};
;