/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@llamaindex+llama-deploy@0.0.2";
exports.ids = ["vendor-chunks/@llamaindex+llama-deploy@0.0.2"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@llamaindex+llama-deploy@0.0.2/node_modules/@llamaindex/llama-deploy/dist/index.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@llamaindex+llama-deploy@0.0.2/node_modules/@llamaindex/llama-deploy/dist/index.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nconst serializeFormDataPair = (data, key, value)=>{\n    if (typeof value === 'string' || value instanceof Blob) {\n        data.append(key, value);\n    } else {\n        data.append(key, JSON.stringify(value));\n    }\n};\nconst formDataBodySerializer = {\n    bodySerializer: (body)=>{\n        const data = new FormData();\n        Object.entries(body).forEach(([key, value])=>{\n            if (value === undefined || value === null) {\n                return;\n            }\n            if (Array.isArray(value)) {\n                value.forEach((v)=>serializeFormDataPair(data, key, v));\n            } else {\n                serializeFormDataPair(data, key, value);\n            }\n        });\n        return data;\n    }\n};\nconst jsonBodySerializer = {\n    bodySerializer: (body)=>JSON.stringify(body, (key, value)=>typeof value === 'bigint' ? value.toString() : value)\n};\n\nconst getAuthToken = async (auth, callback)=>{\n    const token = typeof callback === 'function' ? await callback(auth) : callback;\n    if (!token) {\n        return;\n    }\n    if (auth.scheme === 'bearer') {\n        return `Bearer ${token}`;\n    }\n    if (auth.scheme === 'basic') {\n        return `Basic ${btoa(token)}`;\n    }\n    return token;\n};\n\nconst separatorArrayExplode = (style)=>{\n    switch(style){\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\nconst separatorArrayNoExplode = (style)=>{\n    switch(style){\n        case 'form':\n            return ',';\n        case 'pipeDelimited':\n            return '|';\n        case 'spaceDelimited':\n            return '%20';\n        default:\n            return ',';\n    }\n};\nconst separatorObjectExplode = (style)=>{\n    switch(style){\n        case 'label':\n            return '.';\n        case 'matrix':\n            return ';';\n        case 'simple':\n            return ',';\n        default:\n            return '&';\n    }\n};\nconst serializeArrayParam = ({ allowReserved, explode, name, style, value })=>{\n    if (!explode) {\n        const joinedValues = (allowReserved ? value : value.map((v)=>encodeURIComponent(v))).join(separatorArrayNoExplode(style));\n        switch(style){\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            case 'simple':\n                return joinedValues;\n            default:\n                return `${name}=${joinedValues}`;\n        }\n    }\n    const separator = separatorArrayExplode(style);\n    const joinedValues = value.map((v)=>{\n        if (style === 'label' || style === 'simple') {\n            return allowReserved ? v : encodeURIComponent(v);\n        }\n        return serializePrimitiveParam({\n            allowReserved,\n            name,\n            value: v\n        });\n    }).join(separator);\n    return style === 'label' || style === 'matrix' ? separator + joinedValues : joinedValues;\n};\nconst serializePrimitiveParam = ({ allowReserved, name, value })=>{\n    if (value === undefined || value === null) {\n        return '';\n    }\n    if (typeof value === 'object') {\n        throw new Error('Deeply-nested arrays/objects arenâ€™t supported. Provide your own `querySerializer()` to handle these.');\n    }\n    return `${name}=${allowReserved ? value : encodeURIComponent(value)}`;\n};\nconst serializeObjectParam = ({ allowReserved, explode, name, style, value, valueOnly })=>{\n    if (value instanceof Date) {\n        return valueOnly ? value.toISOString() : `${name}=${value.toISOString()}`;\n    }\n    if (style !== 'deepObject' && !explode) {\n        let values = [];\n        Object.entries(value).forEach(([key, v])=>{\n            values = [\n                ...values,\n                key,\n                allowReserved ? v : encodeURIComponent(v)\n            ];\n        });\n        const joinedValues = values.join(',');\n        switch(style){\n            case 'form':\n                return `${name}=${joinedValues}`;\n            case 'label':\n                return `.${joinedValues}`;\n            case 'matrix':\n                return `;${name}=${joinedValues}`;\n            default:\n                return joinedValues;\n        }\n    }\n    const separator = separatorObjectExplode(style);\n    const joinedValues = Object.entries(value).map(([key, v])=>serializePrimitiveParam({\n            allowReserved,\n            name: style === 'deepObject' ? `${name}[${key}]` : key,\n            value: v\n        })).join(separator);\n    return style === 'label' || style === 'matrix' ? separator + joinedValues : joinedValues;\n};\n\nconst PATH_PARAM_RE = /\\{[^{}]+\\}/g;\nconst defaultPathSerializer = ({ path, url: _url })=>{\n    let url = _url;\n    const matches = _url.match(PATH_PARAM_RE);\n    if (matches) {\n        for (const match of matches){\n            let explode = false;\n            let name = match.substring(1, match.length - 1);\n            let style = 'simple';\n            if (name.endsWith('*')) {\n                explode = true;\n                name = name.substring(0, name.length - 1);\n            }\n            if (name.startsWith('.')) {\n                name = name.substring(1);\n                style = 'label';\n            } else if (name.startsWith(';')) {\n                name = name.substring(1);\n                style = 'matrix';\n            }\n            const value = path[name];\n            if (value === undefined || value === null) {\n                continue;\n            }\n            if (Array.isArray(value)) {\n                url = url.replace(match, serializeArrayParam({\n                    explode,\n                    name,\n                    style,\n                    value\n                }));\n                continue;\n            }\n            if (typeof value === 'object') {\n                url = url.replace(match, serializeObjectParam({\n                    explode,\n                    name,\n                    style,\n                    value: value,\n                    valueOnly: true\n                }));\n                continue;\n            }\n            if (style === 'matrix') {\n                url = url.replace(match, `;${serializePrimitiveParam({\n                    name,\n                    value: value\n                })}`);\n                continue;\n            }\n            const replaceValue = encodeURIComponent(style === 'label' ? `.${value}` : value);\n            url = url.replace(match, replaceValue);\n        }\n    }\n    return url;\n};\nconst createQuerySerializer = ({ allowReserved, array, object } = {})=>{\n    const querySerializer = (queryParams)=>{\n        const search = [];\n        if (queryParams && typeof queryParams === 'object') {\n            for(const name in queryParams){\n                const value = queryParams[name];\n                if (value === undefined || value === null) {\n                    continue;\n                }\n                if (Array.isArray(value)) {\n                    const serializedArray = serializeArrayParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'form',\n                        value,\n                        ...array\n                    });\n                    if (serializedArray) search.push(serializedArray);\n                } else if (typeof value === 'object') {\n                    const serializedObject = serializeObjectParam({\n                        allowReserved,\n                        explode: true,\n                        name,\n                        style: 'deepObject',\n                        value: value,\n                        ...object\n                    });\n                    if (serializedObject) search.push(serializedObject);\n                } else {\n                    const serializedPrimitive = serializePrimitiveParam({\n                        allowReserved,\n                        name,\n                        value: value\n                    });\n                    if (serializedPrimitive) search.push(serializedPrimitive);\n                }\n            }\n        }\n        return search.join('&');\n    };\n    return querySerializer;\n};\n/**\n * Infers parseAs value from provided Content-Type header.\n */ const getParseAs = (contentType)=>{\n    if (!contentType) {\n        // If no Content-Type header is provided, the best we can do is return the raw response body,\n        // which is effectively the same as the 'stream' option.\n        return 'stream';\n    }\n    const cleanContent = contentType.split(';')[0]?.trim();\n    if (!cleanContent) {\n        return;\n    }\n    if (cleanContent.startsWith('application/json') || cleanContent.endsWith('+json')) {\n        return 'json';\n    }\n    if (cleanContent === 'multipart/form-data') {\n        return 'formData';\n    }\n    if ([\n        'application/',\n        'audio/',\n        'image/',\n        'video/'\n    ].some((type)=>cleanContent.startsWith(type))) {\n        return 'blob';\n    }\n    if (cleanContent.startsWith('text/')) {\n        return 'text';\n    }\n};\nconst setAuthParams = async ({ security, ...options })=>{\n    for (const auth of security){\n        const token = await getAuthToken(auth, options.auth);\n        if (!token) {\n            continue;\n        }\n        const name = auth.name ?? 'Authorization';\n        switch(auth.in){\n            case 'query':\n                if (!options.query) {\n                    options.query = {};\n                }\n                options.query[name] = token;\n                break;\n            case 'cookie':\n                options.headers.append('Cookie', `${name}=${token}`);\n                break;\n            case 'header':\n            default:\n                options.headers.set(name, token);\n                break;\n        }\n        return;\n    }\n};\nconst buildUrl = (options)=>{\n    const url = getUrl({\n        baseUrl: options.baseUrl,\n        path: options.path,\n        query: options.query,\n        querySerializer: typeof options.querySerializer === 'function' ? options.querySerializer : createQuerySerializer(options.querySerializer),\n        url: options.url\n    });\n    return url;\n};\nconst getUrl = ({ baseUrl, path, query, querySerializer, url: _url })=>{\n    const pathUrl = _url.startsWith('/') ? _url : `/${_url}`;\n    let url = (baseUrl ?? '') + pathUrl;\n    if (path) {\n        url = defaultPathSerializer({\n            path,\n            url\n        });\n    }\n    let search = query ? querySerializer(query) : '';\n    if (search.startsWith('?')) {\n        search = search.substring(1);\n    }\n    if (search) {\n        url += `?${search}`;\n    }\n    return url;\n};\nconst mergeConfigs = (a, b)=>{\n    const config = {\n        ...a,\n        ...b\n    };\n    if (config.baseUrl?.endsWith('/')) {\n        config.baseUrl = config.baseUrl.substring(0, config.baseUrl.length - 1);\n    }\n    config.headers = mergeHeaders(a.headers, b.headers);\n    return config;\n};\nconst mergeHeaders = (...headers)=>{\n    const mergedHeaders = new Headers();\n    for (const header of headers){\n        if (!header || typeof header !== 'object') {\n            continue;\n        }\n        const iterator = header instanceof Headers ? header.entries() : Object.entries(header);\n        for (const [key, value] of iterator){\n            if (value === null) {\n                mergedHeaders.delete(key);\n            } else if (Array.isArray(value)) {\n                for (const v of value){\n                    mergedHeaders.append(key, v);\n                }\n            } else if (value !== undefined) {\n                // assume object headers are meant to be JSON stringified, i.e. their\n                // content value in OpenAPI specification is 'application/json'\n                mergedHeaders.set(key, typeof value === 'object' ? JSON.stringify(value) : value);\n            }\n        }\n    }\n    return mergedHeaders;\n};\nclass Interceptors {\n    clear() {\n        this._fns = [];\n    }\n    getInterceptorIndex(id) {\n        if (typeof id === 'number') {\n            return this._fns[id] ? id : -1;\n        } else {\n            return this._fns.indexOf(id);\n        }\n    }\n    exists(id) {\n        const index = this.getInterceptorIndex(id);\n        return !!this._fns[index];\n    }\n    eject(id) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = null;\n        }\n    }\n    update(id, fn) {\n        const index = this.getInterceptorIndex(id);\n        if (this._fns[index]) {\n            this._fns[index] = fn;\n            return id;\n        } else {\n            return false;\n        }\n    }\n    use(fn) {\n        this._fns = [\n            ...this._fns,\n            fn\n        ];\n        return this._fns.length - 1;\n    }\n    constructor(){\n        this._fns = [];\n    }\n}\n// do not add `Middleware` as return type so we can use _fns internally\nconst createInterceptors = ()=>({\n        error: new Interceptors(),\n        request: new Interceptors(),\n        response: new Interceptors()\n    });\nconst defaultQuerySerializer = createQuerySerializer({\n    allowReserved: false,\n    array: {\n        explode: true,\n        style: 'form'\n    },\n    object: {\n        explode: true,\n        style: 'deepObject'\n    }\n});\nconst defaultHeaders = {\n    'Content-Type': 'application/json'\n};\nconst createConfig = (override = {})=>({\n        ...jsonBodySerializer,\n        headers: defaultHeaders,\n        parseAs: 'auto',\n        querySerializer: defaultQuerySerializer,\n        ...override\n    });\n\nconst createClient = (config = {})=>{\n    let _config = mergeConfigs(createConfig(), config);\n    const getConfig = ()=>({\n            ..._config\n        });\n    const setConfig = (config)=>{\n        _config = mergeConfigs(_config, config);\n        return getConfig();\n    };\n    const interceptors = createInterceptors();\n    const request = async (options)=>{\n        const opts = {\n            ..._config,\n            ...options,\n            fetch: options.fetch ?? _config.fetch ?? globalThis.fetch,\n            headers: mergeHeaders(_config.headers, options.headers)\n        };\n        if (opts.security) {\n            await setAuthParams({\n                ...opts,\n                security: opts.security\n            });\n        }\n        if (opts.body && opts.bodySerializer) {\n            opts.body = opts.bodySerializer(opts.body);\n        }\n        // remove Content-Type header if body is empty to avoid sending invalid requests\n        if (opts.body === undefined || opts.body === '') {\n            opts.headers.delete('Content-Type');\n        }\n        const url = buildUrl(opts);\n        const requestInit = {\n            redirect: 'follow',\n            ...opts\n        };\n        let request = new Request(url, requestInit);\n        for (const fn of interceptors.request._fns){\n            if (fn) {\n                request = await fn(request, opts);\n            }\n        }\n        // fetch must be assigned here, otherwise it would throw the error:\n        // TypeError: Failed to execute 'fetch' on 'Window': Illegal invocation\n        const _fetch = opts.fetch;\n        let response = await _fetch(request);\n        for (const fn of interceptors.response._fns){\n            if (fn) {\n                response = await fn(response, request, opts);\n            }\n        }\n        const result = {\n            request,\n            response\n        };\n        if (response.ok) {\n            if (response.status === 204 || response.headers.get('Content-Length') === '0') {\n                return opts.responseStyle === 'data' ? {} : {\n                    data: {},\n                    ...result\n                };\n            }\n            const parseAs = (opts.parseAs === 'auto' ? getParseAs(response.headers.get('Content-Type')) : opts.parseAs) ?? 'json';\n            if (parseAs === 'stream') {\n                return opts.responseStyle === 'data' ? response.body : {\n                    data: response.body,\n                    ...result\n                };\n            }\n            let data = await response[parseAs]();\n            if (parseAs === 'json') {\n                if (opts.responseValidator) {\n                    await opts.responseValidator(data);\n                }\n                if (opts.responseTransformer) {\n                    data = await opts.responseTransformer(data);\n                }\n            }\n            return opts.responseStyle === 'data' ? data : {\n                data,\n                ...result\n            };\n        }\n        let error = await response.text();\n        try {\n            error = JSON.parse(error);\n        } catch  {\n        // noop\n        }\n        let finalError = error;\n        for (const fn of interceptors.error._fns){\n            if (fn) {\n                finalError = await fn(error, response, request, opts);\n            }\n        }\n        finalError = finalError || {};\n        if (opts.throwOnError) {\n            throw finalError;\n        }\n        // TODO: we probably want to return error and improve types\n        return opts.responseStyle === 'data' ? undefined : {\n            error: finalError,\n            ...result\n        };\n    };\n    return {\n        buildUrl,\n        connect: (options)=>request({\n                ...options,\n                method: 'CONNECT'\n            }),\n        delete: (options)=>request({\n                ...options,\n                method: 'DELETE'\n            }),\n        get: (options)=>request({\n                ...options,\n                method: 'GET'\n            }),\n        getConfig,\n        head: (options)=>request({\n                ...options,\n                method: 'HEAD'\n            }),\n        interceptors,\n        options: (options)=>request({\n                ...options,\n                method: 'OPTIONS'\n            }),\n        patch: (options)=>request({\n                ...options,\n                method: 'PATCH'\n            }),\n        post: (options)=>request({\n                ...options,\n                method: 'POST'\n            }),\n        put: (options)=>request({\n                ...options,\n                method: 'PUT'\n            }),\n        request,\n        setConfig,\n        trace: (options)=>request({\n                ...options,\n                method: 'TRACE'\n            })\n    };\n};\n\n// This file is auto-generated by @hey-api/openapi-ts\nconst client = createClient(createConfig());\n\n// This file is auto-generated by @hey-api/openapi-ts\n/**\n * Read Deployments\n * Returns a list of active deployments.\n */ const readDeploymentsDeploymentsGet = (options)=>{\n    return (options?.client ?? client).get({\n        url: '/deployments/',\n        ...options\n    });\n};\n/**\n * Read Deployment\n * Returns the details of a specific deployment.\n */ const readDeploymentDeploymentsDeploymentNameGet = (options)=>{\n    return (options.client ?? client).get({\n        url: '/deployments/{deployment_name}',\n        ...options\n    });\n};\n/**\n * Create Deployment\n * Creates a new deployment by uploading a configuration file.\n */ const createDeploymentDeploymentsCreatePost = (options)=>{\n    return (options.client ?? client).post({\n        ...formDataBodySerializer,\n        url: '/deployments/create',\n        ...options,\n        headers: {\n            'Content-Type': null,\n            ...options.headers\n        }\n    });\n};\n/**\n * Create Deployment Task\n * Create a task for the deployment, wait for result and delete associated session.\n */ const createDeploymentTaskDeploymentsDeploymentNameTasksRunPost = (options)=>{\n    return (options.client ?? client).post({\n        url: '/deployments/{deployment_name}/tasks/run',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n/**\n * Create Deployment Task Nowait\n * Create a task for the deployment but don't wait for result.\n */ const createDeploymentTaskNowaitDeploymentsDeploymentNameTasksCreatePost = (options)=>{\n    return (options.client ?? client).post({\n        url: '/deployments/{deployment_name}/tasks/create',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n/**\n * Get Events\n * Get the stream of events from a given task and session.\n *\n * Args:\n * raw_event (bool, default=False): Whether to return the raw event object\n * or just the event data.\n */ const getEventsDeploymentsDeploymentNameTasksTaskIdEventsGet = (options)=>{\n    return (options.client ?? client).get({\n        url: '/deployments/{deployment_name}/tasks/{task_id}/events',\n        ...options\n    });\n};\n/**\n * Send Event\n * Send a human response event to a service for a specific task and session.\n */ const sendEventDeploymentsDeploymentNameTasksTaskIdEventsPost = (options)=>{\n    return (options.client ?? client).post({\n        url: '/deployments/{deployment_name}/tasks/{task_id}/events',\n        ...options,\n        headers: {\n            'Content-Type': 'application/json',\n            ...options.headers\n        }\n    });\n};\n/**\n * Get Task Result\n * Get the task result associated with a task and session.\n */ const getTaskResultDeploymentsDeploymentNameTasksTaskIdResultsGet = (options)=>{\n    return (options.client ?? client).get({\n        url: '/deployments/{deployment_name}/tasks/{task_id}/results',\n        ...options\n    });\n};\n/**\n * Get Tasks\n * Get all the tasks from all the sessions in a given deployment.\n */ const getTasksDeploymentsDeploymentNameTasksGet = (options)=>{\n    return (options.client ?? client).get({\n        url: '/deployments/{deployment_name}/tasks',\n        ...options\n    });\n};\n/**\n * Get Sessions\n * Get the active sessions in a deployment and service.\n */ const getSessionsDeploymentsDeploymentNameSessionsGet = (options)=>{\n    return (options.client ?? client).get({\n        url: '/deployments/{deployment_name}/sessions',\n        ...options\n    });\n};\n/**\n * Get Session\n * Get the definition of a session by ID.\n */ const getSessionDeploymentsDeploymentNameSessionsSessionIdGet = (options)=>{\n    return (options.client ?? client).get({\n        url: '/deployments/{deployment_name}/sessions/{session_id}',\n        ...options\n    });\n};\n/**\n * Create Session\n * Create a new session for a deployment.\n */ const createSessionDeploymentsDeploymentNameSessionsCreatePost = (options)=>{\n    return (options.client ?? client).post({\n        url: '/deployments/{deployment_name}/sessions/create',\n        ...options\n    });\n};\n/**\n * Delete Session\n * Get the active sessions in a deployment and service.\n */ const deleteSessionDeploymentsDeploymentNameSessionsDeletePost = (options)=>{\n    return (options.client ?? client).post({\n        url: '/deployments/{deployment_name}/sessions/delete',\n        ...options\n    });\n};\n/**\n * Proxy\n */ const proxyDeploymentsDeploymentNameUiGet = (options)=>{\n    return (options.client ?? client).delete({\n        url: '/deployments/{deployment_name}/ui',\n        ...options\n    });\n};\n/**\n * Proxy\n */ const proxyDeploymentsDeploymentNameUiGet2 = (options)=>{\n    return (options.client ?? client).get({\n        url: '/deployments/{deployment_name}/ui',\n        ...options\n    });\n};\n/**\n * Proxy\n */ const proxyDeploymentsDeploymentNameUiGet3 = (options)=>{\n    return (options.client ?? client).head({\n        url: '/deployments/{deployment_name}/ui',\n        ...options\n    });\n};\n/**\n * Proxy\n */ const proxyDeploymentsDeploymentNameUiGet4 = (options)=>{\n    return (options.client ?? client).options({\n        url: '/deployments/{deployment_name}/ui',\n        ...options\n    });\n};\n/**\n * Proxy\n */ const proxyDeploymentsDeploymentNameUiGet5 = (options)=>{\n    return (options.client ?? client).patch({\n        url: '/deployments/{deployment_name}/ui',\n        ...options\n    });\n};\n/**\n * Proxy\n */ const proxyDeploymentsDeploymentNameUiGet6 = (options)=>{\n    return (options.client ?? client).post({\n        url: '/deployments/{deployment_name}/ui',\n        ...options\n    });\n};\n/**\n * Proxy\n */ const proxyDeploymentsDeploymentNameUiGet7 = (options)=>{\n    return (options.client ?? client).put({\n        url: '/deployments/{deployment_name}/ui',\n        ...options\n    });\n};\n/**\n * Proxy\n */ const proxyDeploymentsDeploymentNameUiPathGet = (options)=>{\n    return (options.client ?? client).delete({\n        url: '/deployments/{deployment_name}/ui/{path}',\n        ...options\n    });\n};\n/**\n * Proxy\n */ const proxyDeploymentsDeploymentNameUiPathGet2 = (options)=>{\n    return (options.client ?? client).get({\n        url: '/deployments/{deployment_name}/ui/{path}',\n        ...options\n    });\n};\n/**\n * Proxy\n */ const proxyDeploymentsDeploymentNameUiPathGet3 = (options)=>{\n    return (options.client ?? client).head({\n        url: '/deployments/{deployment_name}/ui/{path}',\n        ...options\n    });\n};\n/**\n * Proxy\n */ const proxyDeploymentsDeploymentNameUiPathGet4 = (options)=>{\n    return (options.client ?? client).options({\n        url: '/deployments/{deployment_name}/ui/{path}',\n        ...options\n    });\n};\n/**\n * Proxy\n */ const proxyDeploymentsDeploymentNameUiPathGet5 = (options)=>{\n    return (options.client ?? client).patch({\n        url: '/deployments/{deployment_name}/ui/{path}',\n        ...options\n    });\n};\n/**\n * Proxy\n */ const proxyDeploymentsDeploymentNameUiPathGet6 = (options)=>{\n    return (options.client ?? client).post({\n        url: '/deployments/{deployment_name}/ui/{path}',\n        ...options\n    });\n};\n/**\n * Proxy\n */ const proxyDeploymentsDeploymentNameUiPathGet7 = (options)=>{\n    return (options.client ?? client).put({\n        url: '/deployments/{deployment_name}/ui/{path}',\n        ...options\n    });\n};\n/**\n * Status\n */ const statusStatusGet = (options)=>{\n    return (options?.client ?? client).get({\n        url: '/status/',\n        ...options\n    });\n};\n/**\n * Metrics\n * Proxies the Prometheus metrics endpoint through the API Server.\n *\n * This endpoint is mostly used in serverless environments where the LlamaDeploy\n * container cannot expose more than one port (e.g. Knative, Google Cloud Run).\n * If Prometheus is not enabled, this endpoint returns an empty HTTP-204 response.\n */ const metricsStatusMetricsGet = (options)=>{\n    return (options?.client ?? client).get({\n        url: '/status/metrics',\n        ...options\n    });\n};\n/**\n * Root\n */ const rootGet = (options)=>{\n    return (options?.client ?? client).get({\n        url: '/',\n        ...options\n    });\n};\n\nexports.client = client;\nexports.createClient = createClient;\nexports.createConfig = createConfig;\nexports.createDeploymentDeploymentsCreatePost = createDeploymentDeploymentsCreatePost;\nexports.createDeploymentTaskDeploymentsDeploymentNameTasksRunPost = createDeploymentTaskDeploymentsDeploymentNameTasksRunPost;\nexports.createDeploymentTaskNowaitDeploymentsDeploymentNameTasksCreatePost = createDeploymentTaskNowaitDeploymentsDeploymentNameTasksCreatePost;\nexports.createSessionDeploymentsDeploymentNameSessionsCreatePost = createSessionDeploymentsDeploymentNameSessionsCreatePost;\nexports.deleteSessionDeploymentsDeploymentNameSessionsDeletePost = deleteSessionDeploymentsDeploymentNameSessionsDeletePost;\nexports.getEventsDeploymentsDeploymentNameTasksTaskIdEventsGet = getEventsDeploymentsDeploymentNameTasksTaskIdEventsGet;\nexports.getSessionDeploymentsDeploymentNameSessionsSessionIdGet = getSessionDeploymentsDeploymentNameSessionsSessionIdGet;\nexports.getSessionsDeploymentsDeploymentNameSessionsGet = getSessionsDeploymentsDeploymentNameSessionsGet;\nexports.getTaskResultDeploymentsDeploymentNameTasksTaskIdResultsGet = getTaskResultDeploymentsDeploymentNameTasksTaskIdResultsGet;\nexports.getTasksDeploymentsDeploymentNameTasksGet = getTasksDeploymentsDeploymentNameTasksGet;\nexports.metricsStatusMetricsGet = metricsStatusMetricsGet;\nexports.proxyDeploymentsDeploymentNameUiGet = proxyDeploymentsDeploymentNameUiGet;\nexports.proxyDeploymentsDeploymentNameUiGet2 = proxyDeploymentsDeploymentNameUiGet2;\nexports.proxyDeploymentsDeploymentNameUiGet3 = proxyDeploymentsDeploymentNameUiGet3;\nexports.proxyDeploymentsDeploymentNameUiGet4 = proxyDeploymentsDeploymentNameUiGet4;\nexports.proxyDeploymentsDeploymentNameUiGet5 = proxyDeploymentsDeploymentNameUiGet5;\nexports.proxyDeploymentsDeploymentNameUiGet6 = proxyDeploymentsDeploymentNameUiGet6;\nexports.proxyDeploymentsDeploymentNameUiGet7 = proxyDeploymentsDeploymentNameUiGet7;\nexports.proxyDeploymentsDeploymentNameUiPathGet = proxyDeploymentsDeploymentNameUiPathGet;\nexports.proxyDeploymentsDeploymentNameUiPathGet2 = proxyDeploymentsDeploymentNameUiPathGet2;\nexports.proxyDeploymentsDeploymentNameUiPathGet3 = proxyDeploymentsDeploymentNameUiPathGet3;\nexports.proxyDeploymentsDeploymentNameUiPathGet4 = proxyDeploymentsDeploymentNameUiPathGet4;\nexports.proxyDeploymentsDeploymentNameUiPathGet5 = proxyDeploymentsDeploymentNameUiPathGet5;\nexports.proxyDeploymentsDeploymentNameUiPathGet6 = proxyDeploymentsDeploymentNameUiPathGet6;\nexports.proxyDeploymentsDeploymentNameUiPathGet7 = proxyDeploymentsDeploymentNameUiPathGet7;\nexports.readDeploymentDeploymentsDeploymentNameGet = readDeploymentDeploymentsDeploymentNameGet;\nexports.readDeploymentsDeploymentsGet = readDeploymentsDeploymentsGet;\nexports.rootGet = rootGet;\nexports.sendEventDeploymentsDeploymentNameTasksTaskIdEventsPost = sendEventDeploymentsDeploymentNameTasksTaskIdEventsPost;\nexports.statusStatusGet = statusStatusGet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@llamaindex+llama-deploy@0.0.2/node_modules/@llamaindex/llama-deploy/dist/index.js\n");

/***/ })

};
;