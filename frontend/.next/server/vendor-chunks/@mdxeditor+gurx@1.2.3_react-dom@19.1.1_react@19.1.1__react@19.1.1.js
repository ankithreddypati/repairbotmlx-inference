"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mdxeditor+gurx@1.2.3_react-dom@19.1.1_react@19.1.1__react@19.1.1";
exports.ids = ["vendor-chunks/@mdxeditor+gurx@1.2.3_react-dom@19.1.1_react@19.1.1__react@19.1.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@mdxeditor+gurx@1.2.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/@mdxeditor/gurx/dist/index.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@mdxeditor+gurx@1.2.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/@mdxeditor/gurx/dist/index.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Action: () => (/* binding */ q),\n/* harmony export */   Cell: () => (/* binding */ $),\n/* harmony export */   DerivedCell: () => (/* binding */ D),\n/* harmony export */   Realm: () => (/* binding */ T),\n/* harmony export */   RealmContext: () => (/* binding */ V),\n/* harmony export */   RealmProvider: () => (/* binding */ U),\n/* harmony export */   Signal: () => (/* binding */ K),\n/* harmony export */   changeWith: () => (/* binding */ H),\n/* harmony export */   combine: () => (/* binding */ J),\n/* harmony export */   debounceTime: () => (/* binding */ ot),\n/* harmony export */   defaultComparator: () => (/* binding */ O),\n/* harmony export */   delayWithMicrotask: () => (/* binding */ ct),\n/* harmony export */   filter: () => (/* binding */ nt),\n/* harmony export */   getValue: () => (/* binding */ Q),\n/* harmony export */   handlePromise: () => (/* binding */ at),\n/* harmony export */   link: () => (/* binding */ F),\n/* harmony export */   map: () => (/* binding */ _),\n/* harmony export */   mapTo: () => (/* binding */ et),\n/* harmony export */   onNext: () => (/* binding */ ut),\n/* harmony export */   once: () => (/* binding */ st),\n/* harmony export */   pipe: () => (/* binding */ G),\n/* harmony export */   pub: () => (/* binding */ Y),\n/* harmony export */   pubIn: () => (/* binding */ B),\n/* harmony export */   scan: () => (/* binding */ it),\n/* harmony export */   sub: () => (/* binding */ z),\n/* harmony export */   throttleTime: () => (/* binding */ rt),\n/* harmony export */   useCell: () => (/* binding */ Z),\n/* harmony export */   useCellValue: () => (/* binding */ E),\n/* harmony export */   useCellValues: () => (/* binding */ X),\n/* harmony export */   usePublisher: () => (/* binding */ A),\n/* harmony export */   useRealm: () => (/* binding */ R),\n/* harmony export */   withLatestFrom: () => (/* binding */ tt)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.4.5_@opentelemetry+api@1.9.0_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/.pnpm/next@15.4.5_@opentelemetry+api@1.9.0_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar v = Object.defineProperty;\nvar P = (s, t, e) => t in s ? v(s, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : s[t] = e;\nvar f = (s, t, e) => P(s, typeof t != \"symbol\" ? t + \"\" : t, e);\n\n\nclass M {\n  constructor(t = /* @__PURE__ */ new Map()) {\n    this.map = t;\n  }\n  clone() {\n    return new M(new Map(this.map));\n  }\n  increment(t) {\n    const e = this.map.get(t) ?? 0;\n    this.map.set(t, e + 1);\n  }\n  decrement(t, e) {\n    let n = this.map.get(t);\n    n !== void 0 && (n -= 1, this.map.set(t, n), n === 0 && e());\n  }\n}\nclass C {\n  constructor() {\n    f(this, \"map\", /* @__PURE__ */ new Map());\n  }\n  getOrCreate(t) {\n    let e = this.map.get(t);\n    return e === void 0 && (e = /* @__PURE__ */ new Set(), this.map.set(t, e)), e;\n  }\n  get(t) {\n    return this.map.get(t);\n  }\n  use(t, e) {\n    const n = this.get(t);\n    n !== void 0 && e(n);\n  }\n  delete(t) {\n    return this.map.delete(t);\n  }\n}\nfunction g(s, t) {\n  return t(s), s;\n}\nfunction x() {\n}\nconst I = \"cell\";\nfunction O(s, t) {\n  return s === t;\n}\nconst k = /* @__PURE__ */ new Map();\nlet w;\nclass T {\n  /**\n   * Creates a new realm.\n   * @param initialValues - the initial cell values that will populate the realm.\n   * Those values will not trigger a recomputation cycle, and will overwrite the initial values specified for each cell.\n   */\n  constructor(t = {}) {\n    f(this, \"subscriptions\", new C());\n    f(this, \"singletonSubscriptions\", /* @__PURE__ */ new Map());\n    f(this, \"graph\", new C());\n    f(this, \"state\", /* @__PURE__ */ new Map());\n    f(this, \"distinctNodes\", /* @__PURE__ */ new Map());\n    f(this, \"executionMaps\", /* @__PURE__ */ new Map());\n    f(this, \"definitionRegistry\", /* @__PURE__ */ new Set());\n    for (const e of Object.getOwnPropertySymbols(t))\n      this.state.set(e, t[e]);\n  }\n  /**\n   * Creates or resolves an existing cell instance in the realm. Useful as a joint point when building your own operators.\n   * @returns a reference to the cell.\n   * @param value - the initial value of the cell\n   * @param distinct - true by default. Pass false to mark the signal as a non-distinct one, meaning that publishing the same value multiple times will re-trigger a recomputation cycle.\n   * @param node - optional, a reference to a cell. If the cell has not been touched in the realm before, the realm will instantiate a reference to it. If it's registered already, the function will return the reference.\n   */\n  cellInstance(t, e = !0, n = Symbol()) {\n    return this.state.has(n) || this.state.set(n, t), e !== !1 && !this.distinctNodes.has(n) && this.distinctNodes.set(n, e === !0 ? O : e), n;\n  }\n  /**\n   * Creates or resolves an existing signal instance in the realm. Useful as a joint point when building your own operators.\n   * @returns a reference to the signal.\n   * @param distinct - true by default. Pass false to mark the signal as a non-distinct one, meaning that publishing the same value multiple times will re-trigger a recomputation cycle.\n   * @param node - optional, a reference to a signal. If the signal has not been touched in the realm before, the realm will instantiate a reference to it. If it's registered already, the function will return the reference.\n   */\n  signalInstance(t = !0, e = Symbol()) {\n    return t !== !1 && this.distinctNodes.set(e, t === !0 ? O : t), e;\n  }\n  /**\n   * Subscribes to the values published in the referred node.\n   * @param node - the cell/signal to subscribe to.\n   * @param subscription - the callback to execute when the node receives a new value.\n   * @returns a function that, when called, will cancel the subscription.\n   *\n   * @example\n   * ```ts\n   * const signal$ = Signal<number>()\n   * const r = new Realm()\n   * const unsub = r.sub(signal$, console.log)\n   * r.pub(signal$, 2)\n   * unsub()\n   * r.pub(signal$, 3)\n   * ```\n   */\n  sub(t, e) {\n    this.register(t);\n    const n = this.subscriptions.getOrCreate(t);\n    return n.add(e), () => n.delete(e);\n  }\n  /**\n   * Subscribes exclusively to values in the referred node.\n   * Calling this multiple times on a single node will remove the previous subscription created through `singletonSub`.\n   * Subscriptions created through `sub` are not affected.\n   * @returns a function that, when called, will cancel the subscription.\n   *\n   * @example\n   * ```ts\n   * const signal$ = Signal<number>()\n   * const r = new Realm()\n   * // console.log will run only once.\n   * r.singletonSub(signal$, console.log)\n   * r.singletonSub(signal$, console.log)\n   * r.singletonSub(signal$, console.log)\n   * r.pub(signal$, 2)\n   * ```\n   */\n  singletonSub(t, e) {\n    return this.register(t), e === void 0 ? this.singletonSubscriptions.delete(t) : this.singletonSubscriptions.set(t, e), () => this.singletonSubscriptions.delete(t);\n  }\n  /**\n   * Clears all exclusive subscriptions.\n   */\n  resetSingletonSubs() {\n    this.singletonSubscriptions.clear();\n  }\n  // biome-ignore lint/suspicious/noExplicitAny: I know why we need any here\n  subMultiple(t, e) {\n    const n = this.signalInstance();\n    return this.connect({\n      map: (i) => (...r) => {\n        i(r);\n      },\n      sink: n,\n      sources: t\n    }), this.sub(n, e);\n  }\n  /**\n   * Publishes into multiple nodes simultaneously, triggering a single re-computation cycle.\n   * @param values - a record of node references and their values.\n   *\n   * @example\n   * ```ts\n   * const foo$ = Cell('foo')\n   * const bar$ = Cell('bar')\n   *\n   * const r = new Realm()\n   * r.pubIn({[foo$]: 'foo1', [bar$]: 'bar1'})\n   * ```\n   */\n  pubIn(t) {\n    var a;\n    const e = Reflect.ownKeys(t), n = this.getExecutionMap(e), i = n.refCount.clone(), r = n.participatingNodes.slice(), o = new Map(this.state), l = (p) => {\n      this.graph.use(p, (c) => {\n        for (const { sources: u, sink: y } of c)\n          u.has(p) && i.decrement(y, () => {\n            r.splice(r.indexOf(y), 1), l(y);\n          });\n      });\n    };\n    for (; ; ) {\n      const p = r.shift();\n      if (p === void 0)\n        break;\n      const c = p;\n      let u = !1;\n      const y = (m) => {\n        const h = this.distinctNodes.get(c);\n        if (h != null && h(o.get(c), m)) {\n          u = !1;\n          return;\n        }\n        u = !0, o.set(c, m), this.state.has(c) && this.state.set(c, m);\n      };\n      if (Object.prototype.hasOwnProperty.call(t, c) ? y(t[c]) : n.projections.use(c, (m) => {\n        for (const h of m) {\n          const S = [...Array.from(h.sources), ...Array.from(h.pulls)].map((N) => o.get(N));\n          h.map(y)(...S);\n        }\n      }), u) {\n        const m = o.get(c);\n        this.inContext(() => {\n          this.subscriptions.use(c, (h) => {\n            for (const S of h)\n              S(m);\n          });\n        }), (a = this.singletonSubscriptions.get(c)) == null || a(m);\n      } else\n        l(c);\n    }\n  }\n  /**\n   * A low-level utility that connects multiple nodes to a sink node with a map function. Used as a foundation for the higher-level operators.\n   * The nodes can be active (sources) or passive (pulls).\n   */\n  connect({\n    sources: t,\n    pulls: e = [],\n    map: n,\n    sink: i\n  }) {\n    const r = {\n      map: n,\n      pulls: new Set(e),\n      sink: this.register(i),\n      sources: new Set(t)\n    };\n    for (const o of [...t, ...e])\n      this.register(o), this.graph.getOrCreate(o).add(r);\n    this.executionMaps.clear();\n  }\n  pub(t, e) {\n    this.pubIn({ [t]: e });\n  }\n  pipe(t, ...e) {\n    return this.combineOperators(...e)(t);\n  }\n  transformer(...t) {\n    return (e) => g(this.signalInstance(), (n) => (this.link(this.pipe(n, ...t), e), n));\n  }\n  /**\n   * Links the output of a node to the input of another node.\n   */\n  link(t, e) {\n    this.connect({\n      map: (n) => (i) => {\n        n(i);\n      },\n      sink: e,\n      sources: [t]\n    });\n  }\n  // prettier-ignore\n  combine(...t) {\n    return g(this.signalInstance(), (e) => {\n      this.connect({\n        map: (n) => (...i) => {\n          n(i);\n        },\n        sink: e,\n        sources: t\n      });\n    });\n  }\n  // prettier-ignore\n  combineCells(...t) {\n    return g(\n      this.cellInstance(\n        t.map((e) => this.getValue(e)),\n        !0\n      ),\n      (e) => {\n        this.connect({\n          map: (n) => (...i) => {\n            n(i);\n          },\n          sink: e,\n          sources: t\n        });\n      }\n    );\n  }\n  /**\n   * Gets the current value of a node. The node must be stateful.\n   * @remark if possible, use {@link withLatestFrom} or {@link combine}, as getValue will not create a dependency to the passed node,\n   * which means that if you call it within a computational cycle, you may not get the correct value.\n   * @param node - the node instance.\n   * @example\n   * ```ts\n   * const foo$ = Cell('foo')\n   *\n   * const r = new Realm()\n   * r.getValue(foo$) // 'foo'\n   * r.pub(foo$, 'bar')\n   * //...\n   * r.getValue(foo$) // 'bar'\n   * ```\n   */\n  getValue(t) {\n    return this.register(t), this.state.get(t);\n  }\n  getValues(t) {\n    return t.map((e) => this.getValue(e));\n  }\n  /**\n   * Explicitly includes the specified cell/signal reference in the realm.\n   * Most of the time you don't need to do that, since any interaction with the node through a realm will register it.\n   * The only exception of that rule should be when the interaction is conditional, and the node definition includes an init function that needs to be eagerly evaluated.\n   */\n  register(t) {\n    const e = k.get(t);\n    return e === void 0 || this.definitionRegistry.has(t) ? t : (this.definitionRegistry.add(t), g(\n      e.type === I ? this.cellInstance(e.initial, e.distinct, t) : this.signalInstance(e.distinct, t),\n      (n) => {\n        this.inContext(() => {\n          e.init(this, n);\n        });\n      }\n    ));\n  }\n  inContext(t) {\n    const e = w;\n    w = this;\n    const n = t();\n    return w = e, n;\n  }\n  /**\n   * Convenient for mutation of cells that contian non-primitive values (e.g. arrays, or objects).\n   * Specifies that the cell value should be changed when source emits, with the result of the map callback parameter.\n   * the map parameter gets called with the current value of the cell and the value published through the source.\n   * @typeParam T - the type of the cell value.\n   * @typeParam K - the type of the value published through the source.\n   * @example\n   * ```ts\n   * const items$ = Cell<string[]([])\n   * const addItem$ = Signal<string>(false, (r) => {\n   *   r.changeWith(items$, addItem$, (items, item) => [...items, item])\n   * })\n   * const r = new Realm()\n   * r.pub(addItem$, 'foo')\n   * r.pub(addItem$, 'bar')\n   * r.getValue(items$) // ['foo', 'bar']\n   * ```\n   */\n  changeWith(t, e, n) {\n    this.connect({\n      sources: [e],\n      pulls: [t],\n      sink: t,\n      map: (i) => (r, o) => {\n        i(n(o, r));\n      }\n    });\n  }\n  calculateExecutionMap(t) {\n    const e = [], n = /* @__PURE__ */ new Set(), i = new C(), r = new M(), o = new C(), l = (a, p = 0) => {\n      r.increment(a), !n.has(a) && (this.register(a), i.use(a, (c) => {\n        p = Math.max(...Array.from(c).map((u) => e.indexOf(u))) + 1;\n      }), this.graph.use(a, (c) => {\n        for (const u of c)\n          u.sources.has(a) ? (o.getOrCreate(u.sink).add(u), l(u.sink, p)) : i.getOrCreate(u.sink).add(a);\n      }), n.add(a), e.splice(p, 0, a));\n    };\n    return t.forEach(l), { participatingNodes: e, pendingPulls: i, projections: o, refCount: r };\n  }\n  getExecutionMap(t) {\n    let e = t;\n    if (t.length === 1) {\n      e = t[0];\n      const i = this.executionMaps.get(e);\n      if (i !== void 0)\n        return i;\n    } else\n      for (const [i, r] of this.executionMaps.entries())\n        if (Array.isArray(i) && i.length === t.length && i.every((o) => t.includes(o)))\n          return r;\n    const n = this.calculateExecutionMap(t);\n    return this.executionMaps.set(e, n), n;\n  }\n  combineOperators(...t) {\n    return (e) => {\n      for (const n of t)\n        e = n(e, this);\n      return e;\n    };\n  }\n}\nfunction $(s, t = x, e = !0) {\n  return g(Symbol(), (n) => {\n    k.set(n, { type: I, distinct: e, initial: s, init: t });\n  });\n}\nfunction D(s, t, e = !0) {\n  return g(Symbol(), (n) => {\n    k.set(n, {\n      type: I,\n      distinct: e,\n      initial: s,\n      init: (i, r) => {\n        i.link(t(i, r), r);\n      }\n    });\n  });\n}\nfunction K(s = x, t = !1) {\n  return g(Symbol(), (e) => {\n    k.set(e, { type: \"signal\", distinct: t, init: s });\n  });\n}\nfunction q(s = x) {\n  return g(Symbol(), (t) => {\n    k.set(t, { type: \"signal\", distinct: !1, init: s });\n  });\n}\nfunction b() {\n  if (!w)\n    throw new Error(\"This function must be called within a realm instance\");\n  return w;\n}\nconst F = (s, t) => {\n  b().link(s, t);\n}, Y = (...s) => {\n  b().pub(...s);\n}, z = (...s) => b().sub(...s), B = (...s) => {\n  b().pubIn(...s);\n}, G = (...s) => b().pipe(...s), H = (...s) => {\n  b().changeWith(...s);\n}, J = (...s) => b().combine(...s), Q = (s) => b().getValue(s), V = react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nfunction U({\n  children: s,\n  initWith: t,\n  updateWith: e = {}\n}) {\n  const n = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => new T(t), []);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useEffect(() => {\n    n.pubIn(e);\n  }, [e, n]), /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(V.Provider, { value: n, children: s });\n}\nfunction R() {\n  const s = react__WEBPACK_IMPORTED_MODULE_0__.useContext(V);\n  if (s === null)\n    throw new Error(\"useRealm must be used within a RealmContextProvider\");\n  return s;\n}\nfunction E(s) {\n  const t = R();\n  t.register(s);\n  const e = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((n) => t.sub(s, n), [t, s]);\n  return react__WEBPACK_IMPORTED_MODULE_0__.useSyncExternalStore(\n    e,\n    () => t.getValue(s),\n    () => t.getValue(s)\n  );\n}\nfunction X(...s) {\n  const t = R();\n  return E(t.combineCells.apply(t, s));\n}\nfunction A(s) {\n  const t = R();\n  return t.register(s), react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (e) => {\n      t.pub(s, e);\n    },\n    [t, s]\n  );\n}\nfunction Z(s) {\n  return [E(s), A(s)];\n}\nfunction _(s) {\n  return (t, e) => {\n    const n = e.signalInstance();\n    return e.connect({\n      map: (i) => (r) => {\n        i(s(r));\n      },\n      sink: n,\n      sources: [t]\n    }), n;\n  };\n}\nfunction tt(...s) {\n  return (t, e) => {\n    const n = e.signalInstance();\n    return e.connect({\n      map: (i) => (...r) => {\n        i(r);\n      },\n      pulls: s,\n      sink: n,\n      sources: [t]\n    }), n;\n  };\n}\nfunction et(s) {\n  return (t, e) => {\n    const n = e.signalInstance();\n    return e.connect({\n      map: (i) => () => {\n        i(s);\n      },\n      sink: n,\n      sources: [t]\n    }), n;\n  };\n}\nfunction nt(s) {\n  return (t, e) => {\n    const n = e.signalInstance();\n    return e.connect({\n      map: (i) => (r) => {\n        s(r) && i(r);\n      },\n      sink: n,\n      sources: [t]\n    }), n;\n  };\n}\nfunction st() {\n  return (s, t) => {\n    const e = t.signalInstance();\n    let n = !1;\n    return t.connect({\n      map: (i) => (r) => {\n        n || (n = !0, i(r));\n      },\n      sink: e,\n      sources: [s]\n    }), e;\n  };\n}\nfunction it(s, t) {\n  return (e, n) => {\n    const i = n.signalInstance();\n    return n.connect({\n      map: (r) => (o) => {\n        r(t = s(t, o));\n      },\n      sink: i,\n      sources: [e]\n    }), i;\n  };\n}\nfunction rt(s) {\n  return (t, e) => {\n    const n = e.signalInstance();\n    let i, r = null;\n    return e.sub(t, (o) => {\n      i = o, r === null && (r = setTimeout(() => {\n        r = null, e.pub(n, i);\n      }, s));\n    }), n;\n  };\n}\nfunction ot(s) {\n  return (t, e) => {\n    const n = e.signalInstance();\n    let i, r = null;\n    return e.sub(t, (o) => {\n      i = o, r !== null && clearTimeout(r), r = setTimeout(() => {\n        e.pub(n, i);\n      }, s);\n    }), n;\n  };\n}\nfunction ct() {\n  return (s, t) => {\n    const e = t.signalInstance();\n    return t.sub(s, (n) => {\n      queueMicrotask(() => {\n        t.pub(e, n);\n      });\n    }), e;\n  };\n}\nfunction ut(s) {\n  return (t, e) => {\n    const n = e.signalInstance(), i = Symbol();\n    let r = i;\n    return e.connect({\n      map: (o) => (l) => {\n        r !== i && (o([r, l]), r = i);\n      },\n      sink: n,\n      sources: [s]\n    }), e.sub(t, (o) => {\n      r = o;\n    }), n;\n  };\n}\nfunction at(s, t, e) {\n  return (n, i) => {\n    const r = i.signalInstance();\n    return i.sub(n, (o) => {\n      o !== null && typeof o == \"object\" && \"then\" in o ? (i.pub(r, s()), o.then((l) => {\n        i.pub(r, t(l));\n      }).catch((l) => {\n        i.pub(r, e(l));\n      })) : i.pub(r, t(o));\n    }), r;\n  };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@mdxeditor+gurx@1.2.3_react-dom@19.1.1_react@19.1.1__react@19.1.1/node_modules/@mdxeditor/gurx/dist/index.js\n");

/***/ })

};
;